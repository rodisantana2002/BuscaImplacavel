Software Development in Startup Companies:
The GreenÔ¨Åeld StartupModel

Carmine Giardino, Nicolo Paternoster,Michael Unterkalmsteiner,Member, IEEE,
Tony Gorschek,Member, IEEE, and Pekka Abrahamsson,Member, IEEE

Abstract‚ÄîSoftware startups are newly created companieswith no operating history and oriented towards producing cuttingedge
products. However, despite the increasing importance of startups in the economy, few scientiÔ¨Åc studies attempt to address software
engineering issues, especially for early-stage startups. If anything, startups need engineering practices of the same level or better than
those of larger companies, as their time and resources aremore scarce, and one failed project can put them out of business. In this
study we aim to improve understanding of the software development strategies employed by startups.We performed this state-of-
practice investigation using a grounded theory approach.We packaged the results in the GreenÔ¨Åeld StartupModel (GSM), which
explains the priority of startups to release the product as quickly as possible. This strategy allows startups to verify product andmarket
Ô¨Åt, and to adjust the product trajectory according to early collected user feedback. The need to shorten time-to-market, by speeding up
the development through low-precision engineering activities, is counterbalanced by the need to restructure the product before
targeting further growth. The resulting implications of the GSM outline challenges and gaps, pointing out opportunities for future
research to develop and validate engineering practices in the startup context.

Index Terms‚ÄîSoftware development, startups, grounded theory

1 INTRODUCTION
SOFTWARE startups launchworldwide every day as a result
of an increase in new markets, accessible technologies,
and venture capital [1]. With the term software startups we
refer to those organizations focused on the creation of high
tech and innovative products, with little or no operating his
tory, aiming to aggressively grow their business in highly
scalablemarkets. Being a startup is usually a temporary state,
where a maturing working history and market domain
knowledge leads to the analysis of currentworking practices,
thereby decreasing conditions of extreme uncertainty [2].

The research presented in this paper aims at under
standing how practitioners engineer software development
strategies in startups. We focus on the structure, planning,
and control of software projects, in the period from idea
conception to the Ô¨Årst open beta release. We performed
semi-structured, in-depth interviews with CEOs and CTOs
from 13 startups, covering a wide spectrum of themes and
iteratively adjusted the developed model according to the
emerging evidence. With the resulting GreenÔ¨Åeld Startup
Model (GSM), we capture the underlying phenomenon of
software development in early-stage startups.

New ventures such as Facebook, Linkedin, Spotify, Pinterest,
Instagram, Groupon and Dropbox, to name a few, are exam
ples of startups that evolved into successful businesses.
Despite many success stories, the vast majority of startups
fail within two years of their creation, primarily due to self
destruction rather than competition [3]. Operating in a cha
otic, rapidly evolving and uncertain environment, software
startups face intense time-pressure from the market and are
exposed to relentless competition [4], [5]. To succeed in this
environment startups need to be ready to adapt their prod
uct to new market demands while being constrained by
very limited resources [6].

From an engineering perspective, software development
in startups is challenging as they work in a context where it
is difÔ¨Åcult for software processes to follow a prescriptive
methodology [6], [7]. Even though startups share some
characteristics with similar contexts (e.g., small and web
companies), the combination of different factors makes the
speciÔ¨Åc software development context unique [6], [8].
Therefore, research is needed to investigate and support the
startup engineering activities [7], guide practitioners in tak
ing decisions and avoid choices that could easily lead to
business failure [9].However, despite the impressive size of
the startup ecosystem [10], the research on software engi
neering (SE) in startups presents a gap [2].

With the GreenÔ¨Åeld Startup Model we aim to contribute
to the body of knowledge on startup software engineering.
We created the model as an abstraction of reality [11],
based on a systematic procedure and grounded on empiri
cal data obtained by the study of 13 cases. While the GSM
presents the most signiÔ¨Åcant themes in the development
strategies that characterize these startups‚Äô contexts, it does
not provide guidelines or best practices that should be
followed. However, the categories in the GSM and the
relations among them can provide a common direction,
vocabulary, and model for future research on software
development in startups.

Researchers can use theGSM as a starting point to under
stand how technical debt inÔ¨Çuences the future growth of
startup companies. Furthermore, the model provides a tool
to understand the context in which startups operate, which
is central when developing methods / models / tools /
techniques / practices suited to these types of development
efforts. Filling gaps on the state-of-practice in startups is
also beneÔ¨Åcial for startup practitioners who can apply the
discussed strategies to speed up the development initially,
although they need also to consider the likely drop-down in
performance at a later stage. In this regard, we identiÔ¨Åed
several commonalities between the issues related to soft
ware development in startups and the research focused on
studying technical debt [12], [13]. This paper makes the fol
lowing contributions:

 an empirical investigation into the driving character
istics of early-stage startups. 

 a rigorously developed model that illustrates how
and explains why startups perform engineering
activities in a certainmanner. 

 a discussion on opportunities for future research and
potential solutions for the challenges faced by startups.

The remainder of this paper is structured as follows.
Background and related work is covered in Section 2. Sec
tion 3 introduces the research questions and shows the
design and execution of the study. Results are presented in
Section 4, illustrating the GSM. Section 5 discusses the most
relevant implications of the GSM. Section 6 compares
results of the study to state-of-the-art in literature. Section 7
discusses validity threats. The paper concludes in Section 8.

2 BACKGROUND

Looking at the number of new business incubators which
appeared in the last decade one can estimate the importance
of startups [14]. The wave of disruption in new technologies
has led non-startup companies to be more competitive,
forcing themselves to undertake radical organizational and
innovational renewals, in an attempt tobehavemore like start
ups [15]. However, the implementation of methodologies to
structure and control development activities in startups is still
a challenge [16]. Severalmodelshave been introduced todrive
software development activities in startups, howeverwithout
delivering signiÔ¨Åcant beneÔ¨Åts [6], [16], [17].

Software engineering faces complex and multifaceted
obstacles in understanding how to manage development
processes in the startup context. Bach refers to startups as ‚Äúa
bunch of energetic and committed people without deÔ¨Åned
developmentprocesses‚Äù [18]. Sutton deÔ¨Ånes startups as crea
tive and Ô¨Çexible in nature and reluctant to introduce process
or bureaucratic measures, which may result in ineffective
practices [6]. The limitation of resources leads to a focus on
product development instead of establishing rigid pro
cesses [16], [19]. Attempts to tailor lightweight processes to
startups reported failures: ‚ÄúEveryone is busy, and software
engineering practices are often one of the Ô¨Årst places devel
opers cut corners‚Äù [20]. Rejecting the notion of repeatable
and controlled processes, startups prominently take advan
tage of reactive and low-precision [21] engineering practices
[6], [22], [23], [24].

Startups typically develop software services that are
licensed to customers rather than products that are sold and
customized to a particular client [25].Marketdriven software
development (sometimes called packaged software develop
ment or COTS software development [26]) addresses issues
related to this aspect. Researchers emphasize the importance
of time-to-market as a key strategic objective [27], [28] for com
panies operating in this sector. Furthermore, requirements are
‚Äúinvented by the software company‚Äù [29], ‚Äúrarely doc
umented‚Äù [30], and can be validated only after the product is
released to market [31], [32]. Hence, failed product launches
are largelydue to ‚Äúproductsnotmeeting customerneeds‚Äù [33].
To address this issue, startups embrace product-oriented
practices with Ô¨Çexible teams, applying workÔ¨Çows that pro
vide the ability to quickly change direction to the targeted
market [6], [19]. Therefore,many startups focus on team pro
ductivity, grantingmore freedom to the employees instead of
providing themwith rigid guidelines [22], [23], [24].

Can the goals of startups, namely accelerating time-to-
market and meeting customer needs, be improved by the
use of solid engineering practices customized for startups?
Even though this speciÔ¨Åc question is not the focus of the
study presented in this paper, the detailed investigation of
state-of-practice is a prerequisite for future research into
enabling the engineering taking place in startups.

2.1 General Lack of Research in Startups

Sutton [6] noted in 2000 a general lack of studies in this area,
claiming that ‚Äúsoftware startups represent a segment that
has been mostly neglected in process studies‚Äù. Further evi
dence for this observation is provided by Coleman and
O‚ÄôConnor [16], [17], [34] in 2008. A systematic mapping
study (SMS) [2] performed in 2013 identiÔ¨Åed only a few
studies into software engineering practices with focus on
startups. Moreover, the identiÔ¨Åed studies are highly frag
mented and spread across different areas rather than consti
tuting a consistent body of knowledge. The following
sections discuss the Ô¨Åndings of the SMS.

2.2 Software Development in Startups

Carmel [35] introduced the term startup to the SE literature
in 1994, studying the time-to-completion in a young pack
age Ô¨Årm.He noticed how these companieswere particularly
innovative and successful, advocating research to investi
gate their software development practices and enabling rep
lication of their success by transferring their practices to
other technology sectors.

Software startups are product-oriented in the Ô¨Årst period
of their development phase [19]. Despite good early achieve
ments, software development and organizational manage
ment increase in complexity [36], [37] causing deterioration of
performance over time. BrieÔ¨Çy, the necessity of establishing
initial repeatable and scalable processes cannot be postponed
forever [38]. Starting without any established workÔ¨Çows [9],
startups grow over time, creating and stabilizing processes to
eventually improve them onlywhen sufÔ¨Åcientlymature [3].

As startups have little time for training activities, as dis
cussed by Sutton [6], the focus shifts from prescriptive pro
cesses to team capabilities, hiring people who can ‚Äúhit the
ground running‚Äù [39]. Empowering the team and focusing on
methodological attributes of the processes oriented towards
prototyping, proof-of-concepts,mock-ups and demos, testing
basic functionalities, have been the priority in startups [35].
With the startups‚Äô growth, coordinated quality control and
long-term planning processes become necessary [39].

Tingling [40] studied the extent to which maturity of a
company affects process adoption. He reports on introduc
ing Extreme Programming (XP) principles [41] in the devel
opment process, and the challenges arising from the need of
trained team-members to fully implement themethodology.
Similarly, da Silva and Kon [42] were only able to start with
all the XP practices in place after sixmonths of coaching the
team. Nevertheless, even then, customization of practices
need to be implemented, adapting the processes to the start
ups context [43].

Contributions to Ô¨Çexibility and reactiveness of the devel
opment process exist by means of Lean [44] and Agile [45]
methodologies (also reported in [46], [47]). Startups face
uncertain conditions, leading to a fast learning from trial and
error,with a strong customer relationship, and avoidingwast
ing time in building unneeded functionality and preventing
exhaustion of resources [6], [48], [49]. Customer involvement
in software development has also been discussed by Yogen
dra [50] as an important factor to encourage an early align
ment of business concerns to technology strategies.

However, the question remains, to what extent can
improved practices in, e.g., requirements engineering contrib
ute to shortening time-to-market or improve target market
accuracy. There have been initiatives to optimize practices for
a speciÔ¨Åc purpose.McPhee andEberlein [51] introducedprac
tices adapted for reducing time-to-market.Cohen et al. looked
at development performance and time-to-market trade
off [52]. None of these studies focus on startups per se, but
show that there is current knowledge that could be useful for
startups, or at least can function as a starting point for per
forming research into solutions for startups.

In conclusion, since ‚Äúall decisions related to product
development are trade-off situations‚Äù [49], startups gener
ally optimize workÔ¨Çows to the dynamic context they are
involved in. Startups typically adopt any development style
that might work to support their Ô¨Årst needs, following the
‚ÄúJust do it‚Äù credo [53]. As remarked by Coleman and
O‚ÄôConnor [16], ‚Äúmany managers just decide to apply what
they know, as their experience tells them it is merely com
mon sense‚Äù. This, however, does not preclude the possibility
to collect, package and transfer experience in a lightweight
manner, that allows Ô¨Çexible adoption of good engineering
practices. On the contrary, startups that cannot beneÔ¨Åt from
very experienced team members would increase their suc
cess potential by following validatedwork practices.

2.3 Software Process Improvement (SPI) in Startups

The problem of one-size-Ô¨Åts-all, related to some SPI represen
tations for startups, is described by Fayad [54]. He discusses
the problem in actuating the same best-practices criteria for
established companies in 10-person software startups. Sut
ton [6] remarks that problems of rigid SPImodels in software
startups arise due to: the dynamic nature of the development
process, which precludes repeatability; organizational matu
rity, which cannot be maintained by startups lacking corpo
rate direction; severe lack of resources, both human and
technological forprocessdeÔ¨Ånition, implementation,manage
ment, and training. In conclusion, the primary beneÔ¨Åts of one
size-Ô¨Åts-all SPI oftendo not hold for startups,which instead of
promoting product quality, aim tominimize time-to-market.

Additionally, the role of rigid SPI has been neglected
because it is seen as an obstacle to the team‚Äôs creativity and
Ô¨Çexibility, and to the need of a quick product delivery pro
cess environment [17]. Product quality is often left aside in
favor of minimal and suitable functionalities, shortening
time-to-market.Mater and Subramanian [55] andMirel [56]
report that the quality aspectsmostly taken in consideration
in internet startups are oriented towards usability and scal
ability.However,market and application type heavily inÔ¨Çu
ence the quality demand [16], [57].

To maintain the development activities, oriented towards
limited but suitable functionality, studies suggest external
izing the complexity of parts of the project to third party sol
utions by outsourcing activities [58], software reuse [59] and
open-source strategies [60], [61].

2.4 Technical Debt

A new stream of SE research, trying to tackle the problem of
technical debt [62], brings and encompasses various impli
cations in studying development in software startups. The
metaphoric neologism of technical debtwas originally intro
duced by Cunningham in 1992 [63] and has recently
attracted the attention of SE researchers.1 Brown et al. [65]
provides an illustration of the technical debt concept: ‚ÄúThe
idea is that developers sometimes accept compromises in a
system in one aspect (e.g., modularity) to meet an urgent
demand in some other aspects (e.g., a deadline), and that
such compromises incur a ‚Äúdebt‚Äù onwhich ‚Äúinterest‚Äù has to
be paid andwhich the ‚Äúprincipal‚Äù should be repaid at some
point for the long-term health of the project‚Äù. Tom et al. [62]
identiÔ¨Åed Ô¨Åve dimensions of technical debt: code, design
and architecture, environment, knowledge distribution and
documentation, and testing. On a daily basis startups face a
trade-off between high-speed and high-quality engineering,
not only in architecture design but in multifaceted aspects
(weak project management, testing, process control). In the
context of early-stage startups, we illustrate empirical evi
dence on accumulated technical debt in Section 4.7 and dis
cuss its implications in Section 5.4.

2.5 Terminology

To set a common ground and to prevent ambiguity, we use
the following terminology throughout the paper:

 Software development strategy: the overall approach
adopted by the company to carry out product
development.

 Engineering activities: the activities needed to bring a
product from idea tomarket. Traditional engineering
activities are, among others, requirement engineer
ing, design, architecture, implementation, testing.

 Engineering elements: any practice, tool or artifacts con
tributing to and supporting the engineering activities.

 Quality attributes: those overall factors that affect run
time behavior, system design, and user experience.
They represent areas of concern that have the poten
tial for applications to impact across various layers
and tiers. Some of these attributes are related to the
overall system design, while others are speciÔ¨Åc to
run time, design time, or user centric issues [66].

 Growth: an increase in company size with respect to
the initial conditions for either employees or users/
customers, and product complexity for handling an
increasing number of feature requests. Software product: any software product and/or soft
ware service.

 Software process improvement: any framework, prac
tice, or tool that supports activities leading to a better
software development process [67].

3 RESEARCHMETHODOLOGY

The goal of this study is to understand how software devel
opment strategies are engineered by practitioners in startup
companies. In particular, we are interested in structure,
planning and control of software projects, in the period
from idea conception to the Ô¨Årst open beta release of the
software product.

We set the boundaries of the research by reusing a previ
ously conducted systematic mapping study [2], which
steered also the formulation of research questions:
RQ-1: How do startups structure and execute their main
engineering activities?

RQ-2: How are product quality attributes considered by
startups?

To answer these questions, we investigated the software
development approach undertaken by practitioners of start
ups. Following a Grounded Theory (GT) methodology [68],
we executed 13 semistructured interviews (with 13 compa
nies) integrated with follow-up questionnaires. We tailored
the questionnaires to each startup, partially taking advan
tage of the repertory grid principles [69]. From this, we
elaborated and extracted the GreenÔ¨Åeld Startup Model
explaining the underlying phenomenon of software devel
opment in startups.

Following the GT principles, we captured the most rele
vant aspects of software development from startup practi
tioners, letting a theory emerge from the interviews and
adjusting the research hypotheses and questions as we pro
ceeded. During these interviews we collected data related
to engineering activities undertaken by startups. Then, we
proceeded with the analysis of the data, Ô¨Ånding important
relations among concepts with a formal approach to gener
ate and validate the Ô¨Ånal theory [68].

As suggested byColeman, in view of the different versions
of GT, researchers should indicate which ‚Äúimplementation‚Äù
of the theory is being used [34]. Since information obtained
from the SMS and our direct experiencewith startup compa
nies provided a good initial level of knowledge, in this study
we use Corbin and Strauss‚Äô approach [70]. This GT version
empowers the researchers‚Äô ‚Äútheoretical sensitivity‚Äù [71], and
encourages them to outline the researchproblem beforehand.
Fig. 1 shows a complete overview of the studymethodol
ogy and execution, illustrating how we tailored the general
GT methodology to our speciÔ¨Åc needs. The produced data
collection and analysis packages (including interview ques
tions, follow-up questionnaires and codes) are available in
the supplementalmaterial of this paper [72].

The results of our previous SMS provide input to the
study design, contributing to the Design and Execution of the
study. The process depicted in Fig. 1 is evolutionary and
affects the design at each new iteration. In Data Collection
we integrate the empirical results in a case study database
and subsequently process it in Data Analysis to form theoret
ical categories. At each iteration, the emergent theory is
updated following a formal procedure, ParadigmModel Gen
eration, and after verifying thatwe achieved Theoretical Satu
ration2 of categories,we proceeded to Theory Validation.

The Ô¨Årst two authors jointly executed the whole proce
dure, handling conÔ¨Çicts by reviewing the rationale of deci
sions with the third and fourth authors.When necessary we
performed an in-depth review of the study design and data
collected during the execution process. The process details
are described in the following sections, structured according
to the Ô¨Åvemacro phases depicted in Fig. 1.

3.1 Design and Execution

In this paperwe address technical aspects related to software
development in startups, exploring their operational dynam
ics. Lacking agreement on a unique deÔ¨Ånition of the term
startup, we sampled case companies according to the recur
rent themes characterized in the deÔ¨Ånition of startups [2]:

 newly created:with little or no operating history.

 lack of resources: with economical, human, and
physical limited resources.

 uncertainty: with little knowledge of the ecosystem
under different perspectives: market, product fea
tures, competition, people and Ô¨Ånance.

 aiming to grow: with a scalable business in increas
ing number of users, customers and company‚Äôs size.

We sampled the companies in two distinct phases. First
we executed an initial convenience sampling [73],which led
to the identiÔ¨Åcation of eight companies. Then we included
Ô¨Åve additional startups during the theory formation process
(theoretical sampling), iteratively improving the sample
according to the emerging theory. The characteristics of the
sampled companies are reported in Table 1.

All companies, except C10, were founded within the last
three years (2009-2012), by an average of three founding
members, who were in majority developers. Moreover, the
number of current employees shows how, to different
degrees, companies expanded the initial teams. All compa
nies, except C5, released their Ô¨Årst product to the market
within sixmonths of the idea conception. The products con
sist of pure web (8), web- and mobile (4), and web and
desktop applications (1), launched in six different nations
(United States (4), Italy (4), Germany (2), Sweden (1), United
Kingdom (1), New Zealand (1)). The growing team size and
publicly available data suggest a generally healthy status of
the businesses. A detailed documentation about the startup
sampling and their distribution can be found in the supple
mental material of this paper [72]. We executed the case
studies online, supported by tools for video conferencing,
recording each session which lasted 1 hour on average. The
interview subjects were CEOs or CTOs. When selecting
interviewees, we required that they worked at the company
from the start. We followed a step-by-step work-Ô¨Çow, con
sisting of the actual interview, preparation of the custom
ized follow-up questionnaire and the iterative adjustment
of the interview package artifacts.

3.2 Data Collection

We designed the data collection to allow for triangulation,
which integrates multiple data sources (interview, question
naire) converging on the same phenomenon. The interview
questions (see Table 10 in the supplemental material [72])
cover aspects such asdevelopmentprocess, requirements elic
itation, quality requirements, analysis, design, implementa
tion, testing and deployment.After transcribing an interview,
we sent a follow-up questionnaire to the interviewee. We
designed the questionnaire to capture additional data, gather
missing information and conÔ¨Årm interview results by triangu
lation. Note that we did not use the data from the follow-up
questionnaire as input for theory generation. Table 11 in the
supplementalmaterial, available online, shows the prototype
of the questionnaire thatwe adapted to each interviewee and
company, based on the data collected in the earlier interview.

The case study database allowed us to easily retrieve and
search for information, assembling the evidence from differ 
ent data sources, as described also by Yin [74]. We con
structed and stored the database using the qualitative data
analysis software package AtlasTI.3 We overlapped inter
views with questionnaire results to reveal and Ô¨Çag potential
inconsistencies in the data.

3.3 Data Analysis

The Ô¨Årst two authors led the coding procedure and per
formed the analysis in a co-located environment, i.e., work
ing together on a single computer screen. Before starting the
analysis, a data ordering procedure was necessary as inter
views were spread across a multitude of topics. Therefore,
we structured the transcripts into thematic areas according
to different topic cards used during the interviews.We pro
ceeded horizontally to analyze the same thematic areas
within different transcripts, rather than going through an
entire transcript at one time. Once the data was ordered, we
coded the interviews according the following steps:

 We assigned labels to raw data, and carried out a
Ô¨Årst low-level conceptualization using both in-vivo
and open coding [75].

 We grouped concepts together into theoretical cate
gories and subcategories. By means of axial coding
we Ô¨Årst described the different relations between
subcategories, and then relations between subcatego
ries and categories.

 We reÔ¨Åned categories several times to create differ
ent levels of abstraction and adjusting concepts,
aided by a simple knowledgemanagement tool.

 We validated consistency among categories by selec
tive coding, exploring and analyzing links among
subcategories.

 We identiÔ¨Åed the core category‚Äîthe one with the
greatest explanatory power ‚Äì by analyzing the causal
relations between high-level categories.

During data extractionwe used in-vivo coding combined
with the more descriptive procedure of open coding. Fol
lowing the example of other grounded theories, developed
in related areas such as Information Systems [76] and Soft
ware Process Improvement [77], we performed the high
level conceptualization during creation of categories, in the
process of reÔ¨Åning axial and selective coding. As we were
iterating through the interviews, we analyzed new data by
updating codes and categories when necessary, and taking
notes in the form ofmemos to adjust the emerging theory.

After the coding process, we formalized a Ô¨Årst represen
tation of the GT experience map in a theoretical model. The
model is presented in the form of categories and subcatego
ries that are linked together according to cause-effect rela
tionships [71]. The formation of the theoretical model is a
bottom-up approach. From the empirical data and coding
process, the model developed into two different levels: a
detailed level representing the network of subcategories
(identiÔ¨Åed mainly by the axial coding process), and a high
level representation of the main categories network (identi
Ô¨Åedmainly by the selective coding process).

3.4 ParadigmModel Generation

Asmentioned in Section 3.1,we tested emergent theories by
integrating additional companies into the sample, selected
following the principle of theoretical sampling [74].

We used the process of paradigm modeling, introduced
by Corbin [71], at each iteration togetherwith interview exe
cution, systematically analyzing the emerging theory. The
paradigmmodel is composed of:

 Causal conditions: the events which lead to the occur
rence of the phenomenon, that is our core category.

 Context: set of conditions in which the phenomenon
can be extrapolated.

 Intervening conditions: the broader set of conditions
withwhich the phenomenon can be generalized.

 Action/interaction strategies: the actions and responses
that occur as the result of the phenomenon.

 Consequences: speciÔ¨Åcation of the outcomes, both
intended and unintended of the actions and interac
tion strategies.

Within the limits of the critical bounding assumptions,
the role of the generated theory is to explain, predict and
understand the underlying phenomenon.

3.5 Theory Validation

Presenting a grounded theory is challenging for a researcher,
who must pay attention to structure the included level of
detail, and to the way data is portrayed displaying evidence
of emergent categories. To assess our study and to determine
whether the GT is sufÔ¨Åciently grounded, we used a system
atic technique to validate the theory. Strauss andCorbin pro
vided a list of questions to assist in determining howwell the
Ô¨Åndings are grounded [70]:

Q1 Are concepts generated, and are the concepts sys
tematically related?

Q2 Are theremany conceptual linkages and are the cate
gorieswell developed?

Q3 Is variation4 built into the theory and are the condi
tions under which variation can be found built into
the study and explained?

Q4 Are the conditions under which variation can be
found built into the study and explained?

Q5 Has the process been taken into account, and does
the theory stand the test of time?

Q6 Do the theoretical Ô¨Åndings seem signiÔ¨Åcant, and to
what extent?

In the remainder of this section, we illustrate how we
answered these six questions. We generated the concepts
according to the described codingprocess (Q1) and systemati
cally related them through the use of a network diagram (Q2).
At each iteration of the grounded theory process, we consid
ered and examined a conceptwithin different conditions and
dimensions, trying to incorporate data from a broader range
of practitioners (Q3).We constructed all the linkages and cate
gories by the use ofAtlas.TI and compared them according to
the data analysis process.Moreover, we connected extensive
explanations, in form of in-vivo statements as reported by
practitioners, to the developed concepts (Q4).

We designed the research process in multiple steps,
explaining the purpose and implementation of each. Thus,
the same process togetherwith the supplementalmaterial of
this paper [72] enables other researchers to replicate our
studywithin similar contexts (Q5).Moreover,we performed
a comparison with the state-of-art to validate the theory and
to strengthen its applicability within a wider time-frame
(Q6). By this comparison we highlight the areas which have
been neglected by existing studies, providing possible direc
tions for future studies (see Sections 6.1 and 6.2). Further
more, we studied the confounding factors which could
interferewith the application of theGSM (see Section 6.3).

4 RESULTS: GREENFIELD STARTUPMODEL

The GSM captures the underlying phenomenon of software
development in early-stage startups. The model is formed
by 128 sub-categories, clustered in 35 groups, and Ô¨Ånally in
seven categories (see Fig. 2) at the highest level of abstrac
tion.5 By the means of the GSM we provide explanations of
the development strategies and engineering activities
undertaken by startups. This section focuses on the data col
lected from the studied startups, forming the GSM. Note
that in this section, we report on the GSM which is an
abstraction of the collected empirical data from thirteen
startups. The implications of the GSM and its validity are
discussed in Sections 5 and 6 respectively.

4.1 Model Overview

We have grouped the main concepts representing the
underlying phenomenon together to form high-level catego
ries. Fig. 2 shows the network of causal relationships
(represented by arrows) between categories (represented
by blocks).

In the forthcoming explanation of the GSM we make use
of identiÔ¨Åers (i.e., CATx) for the main categories shown in
Fig. 2. The network is centered around the core category,
speed up development, which is the most interconnected node
in the theory reÔ¨Çecting the fact that ‚Äúit is the one [category]
with the greatest explanatory power‚Äù [70].

A contextual condition, which characterizes to some
extent every startup is the severe lack of resources. In fact, lim
ited access to human, time and intellectual resources con
strain the capabilities of an early-stage startup to support its
development activities. The severe lack of resources forces the
company to focus on implementing an essential set of func
tionalities. This is one of the main reasons why the product
quality has low priority with respect to other more urgent
needs.6 At the same time, to be able to deal with such con
straints, startups depend on a small group of capable and
motivated individuals.

As unanimously expressed by respondents, the highest
priority is to speed up the development as much as possible by
adopting a Ô¨Çexible and effective evolutionary approach. The
low attention given initially to architectural aspects related
to product quality facilitates the efÔ¨Åciency of teamwork.
This allows startups to have a functioning but faulty prod
uct, that can be quickly introduced to the market, starting
from a prototype implementation on day-one.

The initial employees are the ingredients which enable
high levels of performance in software development. To
support a fast-paced production environment, engineers
are required to be highly committed, co-located, multi-role,
and self-organized. In other words, the team is the catalyst of
development.With an essential and Ô¨Çexiblework-Ô¨Çow,which
relies on tacit knowledge instead of formal documentation,
startups can achieve very short time-to-market cycles.How
ever, each line of code, written without following structures
and processes, contributes to growing the accumulated tech
nical debt, which is further increased by having almost non
existing speciÔ¨Åcations, a minimal project management and
a lack of automated tests.

The consequences of such debt may not be perceived in
the initial stages of a startup, where Ô¨Ånding the product/
market Ô¨Åt as quickly as possible is themost important prior
ity. Startups, which survive to subsequent phases will likely
increase their user-base, product size, and number of devel
opers. This will require the company to eventually pay the
accumulated technical debt, and confront the fact that an initial
growth hinders productivity.

In the following sections we explain the categories pre
sented in Fig. 2, and conclude in Section 4.9 with the Ô¨Ånal
theory. In the explanations we use identiÔ¨Åers of the compa
nies presented in Table 1 (i.e., C1:::C13) to highlight state
mentsmade by the interviewees.

4.2 Severe Lack of Resources

The concept of severe lack of resources characterizes the uncer
tainty of development strategies in startups and it is com
posed of three subcategories: time-shortage, limited human
resources and limited access to expertise.

Since startups want to bring the product to market as
quickly as possible, the resource they are themost deprived
of is time. Startups operate under a constant time pressure,
mainly generated by external sources (investor pressure, busi
ness pressure) and sometimes internal necessities such as
internal deadlines and demo presentations at events. In this
regard, C3 commented: ‚ÄúInvestors wanted to see product
features, engineers wanted to make them better. Finally the
time-to-market was considered more important and the
teams‚Äô interestswere somehow sacriÔ¨Åced.‚Äù

In addition, to compensate for the limited human resources,
practitioners empower multi-role and full stack engineers, as
conÔ¨Årmed by C1: ‚ÄúEveryone was involved in any tasks,
from mobile to web development, organizing themselves in
choosing the part to implement‚Äù. The extent to which start
ups have access to specialized knowledge‚Äîboth internal
and external to the company‚Äîis reduced when compared
to established software companies. Therefore, to partially
mitigate the limited access to expertise, startups rely on the
external aid of mentors or advisors. Under these strict limi
tations, most of the decisions related to software develop
ment are fundamentally trade-off situations.

4.3 Team as the Development Catalyst

Among the different aspects fostering the speed of the
development process, the startups‚Äô focus is on the character
istics of the initial team. In startups developers have big respon
sibilities. In fact, limited human resources, discussed in CAT7,
cause the team-members to be active in every aspect of the
development process, from the deÔ¨Ånition of functionalities
to the Ô¨Ånal deployment.

Engineers in the founding team of startups are sometimes
multi-role and typically full-stack engineers. Multi-role engi
neers handle both the development and are at the same time
responsible for marketing and sales. C1 observed that: ‚ÄúA
developer has many responsibilities, and needs to quickly
move among a variety of tasks as there is no company hier
archy.‚Äù Full-stack engineers can tackle different problems at
various levels of the technology stack (generalist developers
instead of specialists). C11 remarked that: ‚ÄúInstead of hiring
gurus in one technology, startups should hire young develop
ers, generalists, that know how to quickly learn new technolo
gies, and quicklymove among a huge variety of tasks.‚Äù

Moreover, having a very small and co-located development
team enables members to operate with high coordination,
relying on tacit knowledge and replacing most of the docu
mentation with informal discussions. Practitioners reported
that keeping the development team small helps startups in
being fast and Ô¨Çexible, as remarked by C8: ‚ÄúIf you have
more than 10 people, it is absolutely impossible to be fast‚Äù.
Then, also basic knowledge of tools and standards of the working
domain and knowing each other before starting the company sup
port the efÔ¨Åciency of activities by limiting the need for formali
ties between team members.

In every software company, skilled developers are essential for
high speed development. Especially in startups, the ‚Äúhacking
culture‚Äù and a tendency to the ‚Äújust-do-it‚Äù approach allow the
team to quickly move from the formulation of a feature idea
to its implementation. In this regard, C1 comments: ‚ÄúWe had
a hacker culture/environment, people hacking stuff without
formally analyzing it, but breaking it down and Ô¨Ånding a
way around.‚Äù

A limited access to expertise forces the team to relymainly on
their personal abilities, even though interviewees reported
that asking mentors for an opinion is a viable practice to aim
for feasible objectives. Furthermore, teams work under constant
pressuremainly constrained by a tight time shortage.

Finally, startups present founders-centric structures, and
especially in the early-stage, the CTO/CEO background has
high-impact on the company‚Äôs development approach. For
instance, in case of an academic background, the CTOmight
encourage the introduction of some architectural design
before the development phase. Even though the CTO/CEO
initially guides the development process, most of the
decisions are taken collectively by all members of the team.
Then, the CTO/CEO only intervenes in situations where
conÔ¨Çicts occur.

4.4 Evolutionary Approach

Startups prefer to build an initial prototype and iteratively
reÔ¨Åne it over time, similarly to the concept of ‚Äúevolutionary
prototyping‚Äù [78]. The goal is to validate the product in the
market as soon as possible, Ô¨Ånding the proper product/
market Ô¨Åt. Indeed, startups can focus on developing only
parts of the system they want to validate instead of working
on developing awhole new system. Then, as the prototype is
released, users detect opportunities for new functionalities
and improvements, and provide their feedback todevelopers.

Since Ô¨Çexibility and reactiveness are the main priorities, the
most suitable class of software development approaches are
highly evolutionary in nature. As uncertain conditions make
long-term planning not viable, startups cannot base theirwork
on assumptions without rapidly validating them by releas
ing the product to market. Uncertainty lies Ô¨Årst of all in the
team composition. Since the teams are typically small and
project knowledge is generally undocumented, even a
minor change in their composition (e.g., a developer falls
ill) can have a signiÔ¨Åcant impact on the overall product
development. Furthermore, startups operate in a continu
ously evolving environment of competitors and targeted
market sectors. Then, to get a competitive advantage in the
market, startups typically make use of cutting-edge solu
tions, characterized by an evolution that cannot be foreseen
in the long run. However, user feedback and requests play
a special role in daily decisions as main drivers for deÔ¨Åning
the product features in the short term.

To obtain fast user responses and quickly validate the
product, startups build a functioning prototype and iterate it
over time. Quoting C4, ‚Äú[. . .] you should start with some
thing that is really rough and then polish it, Ô¨Åx it and iterate.
We were under constant pressure. The aim was to under
stand as soon as possible the product market/Ô¨Åt iterating
quickly, adjusting the product and releasing fast.‚Äù The com
panies focus on building a small set of functionalities to
include in the Ô¨Årst version, and progressively roll-out to a
larger number of people with small iterations (conÔ¨Årmed by C4:
‚Äúwe deploy from 5 to 20 times a day‚Äù).

The objective of this evolutionary approach is to avoid
wasting time on ‚Äúover-engineering the system‚Äù and building
complex functionalities that have not been tested on real
users. By releasing a small number of good-enough function
alities (see CAT3) the startup veriÔ¨Åes the suitability of the
features and understands how to adjust the direction of
product development towards actual users‚Äô needs. The Ô¨Årst
version of the product is typically a prototype containing
basic functionalities developed with the least possible effort
that validates critical features, enabling the startup‚Äôs survival
in the short term. Supported by direct contact and observation
of users, automated feedback collection and analysis of product
metrics, startups attempt to Ô¨Åndwhat is valuable for customers.

4.5 Product Quality Has Low Priority

The interests of software startups, related to the product,
are concentrated on building a limited number of suitable func
tionalities rather than fulÔ¨Ålling non-functional requirements.
This strategy allows them to quickly release simple products
with less need for preliminary architectural studies.

The quality aspects considered by startups during the
development process are geared towards user experience
(UX7), in particular ease of use, attractiveness of the UI and
smooth user-Ô¨Çow without interruptions. C11 notes that UX is
an important quality factor: ‚ÄúWhen a user needs to think too
much on what action should be done next, he will just close
the applicationwithout returning‚Äù. C3 adds: ‚ÄúIf the product
works, but it is not usable, it doesn‚Äôtwork‚Äù.

The extent to which quality aspects are taken into
account might depend on the market sector and the type of
application. Nevertheless, realizing a high level of UX is
often the most important attribute to consider for customer
discovery of evolutionary approaches in view of the limited
human resources and time shortage, presented in CAT7. C4
conÔ¨Årms: ‚ÄúNone of the quality aspects matter that much as
the development speed does.‚Äù

To achieve a good level of UX while dealing with lack of
human resources and time shortages, startups analyze simi
lar products, developed by larger companies that can afford
more rigorous usability studies. Then, the users‚Äô feedback
and product metrics begin to have a central role in deter
mining the achieved UX level. Product metrics are typically
web-based statistical hypothesis testing, such as A/B test
ing [79]. Other than UX, some other factors can inÔ¨Çuence
the quality concerns of development:

 The efÔ¨Åciency emerges after using the product, letting
engineers avoid wasting time in excessive improve
ments of not-validated functionalities.

 The product should be reasonably ready-to-scale to be
able to accommodate a potential growth of the user
base. Startups externalize complexity to third party solu
tions, such asmodern cloud services, achieving a suf
Ô¨Åcient level of scalability.

 Realizing high reliability is not an urgent priority as
users are fault-tolerant towards innovative beta products.
In these cases, users typically have a positive attitude
towards the product, even though it exhibits unreli
able behavior. In this regard, the focus of beta testing
is reducing friction between the product and the users,
often incorporating usability testing. In fact, the beta
release is typically the Ô¨Årst time that the software is
available outside of the developing organization.8

4.6 Speed-Up Development

Speed up development represents the core category of the
GSM. Firmly grounded as the primary objective of startups,
it shows the most important characteristic of developing
software in the early stages.

To speed up development, startups adopt evolutionary
approaches supported by a solid team focusing on imple
menting a minimal set of suitable functionalities. Startups
keep simple and informal workÔ¨Çows to be Ô¨Çexible and reactive,
adapting to a fast changing environment. The fact that
teams are typically self-organized and developers have signiÔ¨Å
cant responsibilities facilitates the adoption of informal work
Ô¨Çows. The aim to shorten time-to-market restricts potential
planning activities, as reported by C8: ‚ÄúSpeed was of
essence so we didn‚Äôt plan out too many details‚Äù. To deal
with such unpredictability, startups prefer to take decisions
as fast as possible, mainly by means of informal and fre
quent verbal discussions.

Even though Agile principles embrace change, startups
often perceive development practices as a waste of time and
ignore them to accommodate the need for releasing the prod
uct to the market quickly. This approach is possible also in
view of a lack of systematic quality assurance activities; start
ups focus on user experience and other quality aspects, such
as efÔ¨Åciency, can be postponed until after the Ô¨Årst release.

Another beneÔ¨Åcial strategy that startups employ to quickly
deliver products is the externalization of complexity on third
party solutions. Startups make use of third party components
(COTS) and open source solutions (for product components,
development tools and libraries). They take advantage of
external services for the sake of delivering a product reasonably
ready to scale for possible future growth.Moreover, advanced
version control systems are not only used tomanage the code
base, but also in task assignment, responsibility tracing, con
Ô¨Åguration and issue management, automatic deployment,
and informal code walkthroughs when issues occur. Even
though the use ofwell-integrated and simple tools allows startups
to automate many activities and reduce their completion
time, drawbacks of such approaches are increased interopera
bility issues.

Startups further improve development speed by making
use of standards and known technologies which are widely rec
ognized,well tested, and supported by strong communities.
Moreover, the use of standards and frameworks reduces
the need for a formal architectural design since most of the
solutions are well documented and ready-to-use. C1 stated
that: ‚Äúas long as you use Ruby standards with the Rails
framework, the language is clean itself and doesn‚Äôt need
much documentation‚Äù.

Other important factors that positively impact the speed
of development are the team‚Äôs desire to create disruptive tech
nologies, to demonstrate personal abilities, and to have the prod
uct used in the market. As reported by practitioners, these
factors are essential to enhance the morale of developers
and therefore to achieve higher team performance. On the
other hand, when a developer is not able to meet deadlines,
especially in the typical sprint-based environments of Agile,
themorale goes down, hindering the development speed.

Finally, the constant pressure under which the company
regularly operates, leads the team to often work overtime to
meet deadlines. But as reported by practitioners, such a way
of working can be an effective strategy only in the short
term since it can lead to poorly maintainable code and
developer burnout in the long run.

4.7 Accumulated Technical Debt

Startups achieve high development speed by radically
ignoring aspects related to documentation, structures and
processes. C4 stated that: ‚ÄúYou have to accept some extent
of technical debt and some Ô¨Çawed code so you can move
faster. You have to hit the sweet spot of moving very fast
but at the same timewithoutwriting code that is so bad that
you cant update it anymore.‚Äù

Instead of traditional requirement engineering activities,
startups make use of informal speciÔ¨Åcation of functionalities
through ticket-based tools to manage low-precision lists of
features to implement,written in the form of self-explanatory
user stories [80]. Practitioners intensively use physical tools
such as post-it notes and whiteboards, which help inmaking
functionalities visible and prioritizing stories based on per
sonal experiences. C4 commented that ‚Äú[. . .] it is the only
way. Toomany peoplemake themistake of sitting down and
write big specs and then they build it for fourmonths, realiz
ing the product is not valuable only at the end.‚Äù

Since startups are risky businesses by nature, even less
attention is given to the traditional phase of analysis, which
they replace by a rough and quick feasibility study. However,
this approach has also disadvantages, as observed by C7:
‚ÄúSome months later I started realizing the drawbacks: now
that we have to grow, it would be nice to have done some
more detailed study. . .But at the same time, maybe if I did
the study, I wouldn‚Äôt have all the agility and Ô¨Çexibility that
we have now. It‚Äôs a big tradeoff.‚Äù It is generally hard to analyze
risks with cutting-edge technologies. To Ô¨Ånd out the feasibility
of such cutting-edge projects, startups attempt a Ô¨Årst imple
mentationwith rough and informal speciÔ¨Åcations, assuming
that the project‚Äôs complexity will remain limited to a few
functionalities, as discussed in CAT3 (Section 4.5).Addition
ally, by keeping the product as simple as possible and learning
from competitors‚Äô solutions and mistakes, practitioners use
their past experiences in similar contexts to help to assess the feasi
bility of the project. Finally, to avoid restrictions on the Ô¨Çexi
bility of the team, potentially limiting decisions are taken
onlywhen strictly necessary and as late as possible.Limiting,
early decisions can increase the technical debt as commented
by C8: ‚ÄúOur biggest shortcoming was a poor initial decision
on data structuring which was fundamental as the whole
code (and the business logic) relied on it. 95 percent was
right, and 5 percent of the data structure was wrong, and
caused a lot of troubles (refactoring and re-doing code).‚Äù

Another important factor that contributes to the accumula
tion of technical debt is the general lack of architectural design,
substituted by high-level mock-ups and low-precision diagrams,
describing critical interactions with third-party components only.
In particular, the use of well-known standards, frameworks
and conventions removes the need for formal UML [81] dia
grams and documentation, and provides a minimum level
of maintenance costs. C6 stated that: ‚Äú. . .with perfect hind
sight we should have used a framework to create more
maintainability of the code. At the beginning, we didn‚Äôt use
the framework to develop the application faster.We believe
that the additional time needed to use the frameworkwould
have payed off, because it would have increased under
standability of the code structure and decrease the time
needed for new developers to startworking.‚Äù

A similar attitude towards veriÔ¨Åcation and validation
brings startups to a lack of automated testing, which is often
replaced by manual smoke tests. Quoting C3, ‚ÄúTrying the
product internally allows us to get rid of 50 percent of bugs
of important functionalities. Meanwhile, users report bugs
of secondary functionalities, eventually allowing us to miti
gate the lack of testing. Indeed, staying one week in

production enables us to identify 90 percent of bugs‚Äù. How
ever, in certain cases where components of the system
might cause loss of data or severe damages to the product
or users, engineers realize a reasonable level of automatic
testing. In such cases, aided by modern automatic tools,
they quickly assess the status of the system integration as
they add new functionalities to the product.

Startups perceive rigid project management as a ‚Äúwaste
of time‚Äù that hinders development speed since the uncer
tainty makes formal scheduling pointless (C9 reported that
‚Äúinitial chaos helps to develop faster‚Äù). Startups‚Äô minimal
project management is supported by keeping: internal mile
stones short and informal, low-precision task assignment mecha
nisms and a low cost project metrics (quoting C13, ‚Äúthe only
track of progresswasmade by looking at closed tickets‚Äù). In
this context only a Ô¨Ånal release milestone is viable, which helps
practitioners to remain focused on short term goals and put
new features in production.

Finally, one of the categories that contributes most to
growing accumulated technical debt is the substantial use of
informal and verbal communication channels on a daily
basis. The high co-location and the fast paced development
approach increase the volume of tacit knowledge and the
severe lack of any kind of documentation. C4 observed in
this regard that: ‚Äú[. . .] the issue of having documentation
and diagrams out of the source code is that you need to
update them every time you change something. There is no
time for it. Instead, there is a huge pay off in having a code
that is understandable itself.‚Äù On the other hand, there are
situations where this strategy is not good enough, as
observed by C1: ‚ÄúI had problems due to the lack of docu
mentation. The only back-end documentation was the front
end-design, so I had to guesswhatwas behind!‚Äù.

4.8 Initial Growth Hinders Performance

The lack of attention given in the Ô¨Årst phases to engineering
activities allows startups to ship code quickly. However, if
the startup survives, the initial product becomes more com
plex over time, the number of users increases and the com
pany starts to grow. Under these circumstances the need to
control the initial chaos forces the development team to
return the accumulated technical debt, instead of focusing on
new users‚Äô requests. Hence, the initial growth hinders perfor
mance in terms of new functionalities delivered to the users.

When the user base increases, customers become more
quality demanding and scalability issues might start to
arise. Company and user size grow when business events
occur, such as: a new round of funding, a possible acquisition,
the release of a competing product on the market, or when the
project is open for the Ô¨Årst public release. Therefore, while the
project lacks even minimal processes, the current team is not
able to manage increased complexity of new functionalities and
maintain the codebase.

Subsequently, practitioners start considering the need for
project management activities, also in view of hiring new
staff members, as discussed by C13: ‚Äú[Projectmanagement] is
strictly necessary if you radically change the team or when
the team grows. The informal communication and lack of
documentation slow down the process afterwards‚Äù. Project
management becomes even more important when the focus
shifts to business concerns. Part of the effort, which was
initially almost entirely dedicated to product development,
moves to business activities. Moreover, the availability of
project information becomes an important issue as the accu
mulated tacit knowledge hinders the ability of new hires to
startworking on project tasks.

Another factor that slows down performance is that
portions of code need to be rewritten and substantial refactoring
of the codebase is required by increasing product demands.
Practitioners realized that some decisions taken (or not
taken) during the rough and quick feasibility study before start
ing the implementation, have led to negative consequences
on the long term performance and maintainability of the
product. The combination of these factors leads to the
need to re-engineer the product. By re-engineering the sys
tems, startups aim to increase the scalability of the product/
infrastructure and start to standardize the codebase with well
known frameworks. C7 reports that: ‚ÄúTo mitigate this (lack of
frameworks) I had to make a schema for other developers
when we hired them. We had to do a big refactoring of the
codebase, moving it from custom php to Django, normaliz
ing the model and making it stick with the business strat
egy. I had the code in different php servers communicating
via JSON, some engineering horror. Now that we are Ô¨Åxing
it, it‚Äôs really painful.We had to trash some code. However I
don‚Äôt regret that I didn‚Äôt make this choice sooner, it was the
onlyway‚Äù.

The fear of changing a product, which is working, arises
when product complexity increases. The changes to the
codebase, to support bug Ô¨Åxing, become highly interrelated
with other functionalities and difÔ¨Åcult to manage because
the product is poorly engineered. Therefore, the fear arises
that changing a validated product might cause changes to
users‚Äô responses. The increasing number of feature requests
leads to the growing necessity of having a release plan. There
fore, startups begin to partially replace informal communication
with traceable systems and introduce basic metrics for measuring
project and team progress to establish an initial structured
workÔ¨Çow. Yet, C11 stated that: ‚Äú[. . .] it is still better to have
a reasonable drop-down in performance when the team
grows than lose time in the beginning‚Äù.

4.9 ParadigmModel

To explain and understand the development strategies in
early-stage software startups we construct the theory gener
ated and supported by the above presented GSM:

Theory Focusing on a limited number of suitable functionalities,
and adopting partial and rapid evolutionary development
approaches, early-stage software startups operate at high devel
opment speed, aided by skilled and highly co-located develop
ers. Through these development strategies, early-stage software
startups aim to Ô¨Ånd early product/market Ô¨Åt within uncertain
conditions and severe lack of resources. However, by speeding
up the development process, they accumulate technical debt,
causing an initial and temporary drop-down in performance
before setting off for further growth.

We formed this theory by considering the different ele
ments speciÔ¨Åed by Corbin and Strauss [71]:

 ‚ÄúCausal conditions‚Äù are represented by three main
conceptual categories: product quality has low priority,
evolutionary approach and team is the catalyst of
development.

 ‚ÄúPhenomenon‚Äù is represented by the core category
speed up development.

 ‚ÄúContext‚Äù is limited to early-stage web software
startups operating in conditions of severe lack of
resources aiming to early Ô¨Ånd product/market Ô¨Åt.

 ‚ÄúIntervening conditions‚Äù are summarized by the
extremely uncertain development environment.

 ‚ÄúAction and interaction strategies‚Äù are represented
by the accumulation of technical debt.

 ‚ÄúConsequences‚Äù lead to a temporary performance
drop-off.

5 IMPLICATIONS OF THE GSM

In this section we present relevant implications that emerge
from the behavior of early-stage startups, formally
expressed in the GSM. Although the startups we studied
were spread across various nations and market sectors (see
Section 3.1), certain patterns emerged.We discuss these pat
terns with respect to literature and identify possible venues
for future research.

5.1 Light-WeightMethodology

Themost urgent priority of software development in startups
is to shorten time-to-market to Ô¨Ånd the right product/market
Ô¨Åt.However, focusing on building and releasing the Ô¨Årst ver
sion of a product, startups tend to not apply any speciÔ¨Åc or
standard development methodologies or processes. Three
interviewees (C5, C7, C13) referenced the Lean startupmeth
odology [53], a highly evolutionary development approach,
centered around the quick production of a functioning proto
type and guided by customer feedback.However, none of the
studied startups strictly followed the complete ‚Äúbuild-mea-
sure-learn‚Äù cycle proposed by the Lean startupmethodology.
One of the main purposes of Lean is waste reduction,
although the identiÔ¨Åcation ofwaste is not an easymatter as it
spans perspectives and time [82]. For example, running a
value stream mapping is resource intensive, something that
may put off startups. Nevertheless, even though the absence
of a basic processmight enable startups to focusmore on the
product, startup companies can take advantage of some engi
neering activities even in the early stages [83]. For instance,
Taipale [46] reports how startups beneÔ¨Åted from tailoring
some simpleXPpractices to their needs.

Startups in the early stage apply fast cycles of ‚Äúbuild and
Ô¨Åx‚Äù when necessary to act quickly and decisively enough to
get the Ô¨Årst response from the market. However, the lack of
perceivable cause and effect relationships constrains effec
tive analysis [84]. Hence, applying best practices in a highly
uncertain environment might be counter-productive. There
is little to analyze yet, and waiting for patterns to emerge
can be considered a waste of time. Quickly developing a set
of suitable functionalities allows the team-members to pres
ent a prototype to a small set of potential customers and
investors to start collecting quick feedback and respond
accordingly.However, the studied startups do not explicitly
follow the step-by-step process of ‚Äúcustomer development‚Äù
deÔ¨Åned by Blank [8]. Instead, they absorb and implement
the high-level principles from the customer development
methodology, reÔ¨Çected in the GSM by the theoretical cate
gory Ô¨Ånd the product/market Ô¨Åt quickly.

From a research perspective, collaboration with startups
and technology transfer to those companies is challenging.
State-of-the-art technology transfer models require long
term commitment from all participants [85], an investment
that might not be acceptable for an early-stage startup.
Thus, there is a need to develop and validate technology
transfermodels adapted to the startup context.

5.2 Empowering the TeamMembers

The Lean startup methodology proposed by Ries [53]
emphasizes team empowerment as a critical factor to pur
sue the development of a Minimum Viable Product (MVP).
Empowerment allows the team to move rapidly and cut
through the bureaucracy, approval committees and veto
cultures. However, empowerment cannot be implemented
without structure and means to measure performance [86].
Startups can use lightweight tools, for example collection
and evaluation of key performance indicators, taskmanage
ment and continuous deployment, to enable information
sharing and autonomy creation which are key aspects of
empowerment [86].

Seung-Bum [87], unlike to Ries‚Äô methodology, structur
ally differentiates four dimensions that positively impact
performance and should be considered in empowerment
programs:

 autonomy of taking decisions, where team-members
can choose the activities they are interested in;

 responsibility for organizational results or success,
keeping track of their own performance;

 information such that team members have inÔ¨Çuence
onmaking decisions; creativity, enabled by a culture where negative
results are not punished, but attempts are rewarded;

Different forms of coordination methods utilize the idea
of dividing problem and solutions space, like handshaking
presented by Fricker et al. [88]. These could also be investi
gated, especially since the main manager of a startup
(CTO/CEO) cannot be involved in all solution deci
sions [89]. Even though the GSM identiÔ¨Åes and explains the
startups‚Äô focus on characteristics of the initial team, further
research is needed to adapt and validate team empower
ment programs in the startup context that can foster the
speed of development processes.

5.3 Focus onMinimal Set of Functionalities

To deliver a productwith the right features built in, startups
need to prioritize and Ô¨Ålter. From an engineering point of
view, most startups do not explicitly apply traditional
Requirement Engineering (RE) activities to collect andman
age requirements. However, by integrating simple techni
ques such as Persona and Scenario, companies can improve
the effectiveness of requirements elicitation even with
mostly unknown Ô¨Ånal users [90], thereby also shortening
time-to-market.

Another study suggests that using a lightweight project
initiation framework such as the Agile Inception Deck can
help in preventing premature failure of the software project
due to awrongunderstanding of theproject requirements [91].

Looking at RE in general, there are several good practice
guidelines that are adapted for small organizations,where the
organization can choose what is relevant for them, see, e.g.,
uniREPM [92].The key is that even startups can beneÔ¨Åt from a
limited and fast inventory of good engineering practices.

5.4 Paying Back the Technical Debt

To be faster, startups may use technical debt as an invest
ment, whose repayment may never come due. Tom
et al. [62] refer to ‚Äúdebt amnesty‚Äù as a written off debt when
a feature or product fails.

Even though potentially useful in the short-term, over
time technical debt has a negative impact on morale, pro
ductivity and product quality. Kruchten et al. [93] suggest
identifying debt and its causes, e.g., by listing debt-related
tasks in a common backlog during release and iteration
planning. Tracking technical debt can also be conducted by
measuring usability and scalability of the product, paying
attention to the customers‚Äô behaviors through real-time and
predictivemonitoring [53].

An alternative to control technical debt with small
effort, as stated by many interviewees, is the use of modern
coding platforms (e.g., Github) and well-known frame
works. Coding platforms allow developers to integrate sev
eral engineering activities such as requirements lists, issue
tracking, source control, documentation, continuous inte
gration, release and conÔ¨Åguration management. Frame
works include support programs, compilers, code libraries
and tool sets to enable the initial development of a project
with limited overhead. However, these strategies target
only particular dimensions [62] of technical debt, such as
environmental and knowledge debt.

Furthermore, to be effective in the selection of third party
components and frameworks, startups need to perform an
efÔ¨Åcient impact analysis of their process conÔ¨Åguration.
Technology selection frameworks have been used to stimu
late innovation [94], as decision making support [95], [96],
and in tool selection [97]. However, such approaches need
to be adapted to the particular constraints and context of
early-stage startups.

5.5 Synthesis

With slightly different levels of adherence, the presented
implications are reÔ¨Çected in the behavior of most of the
companies we studied. The results of this analysis indicate
that early-stage startups are far from adopting standard
development methodologies. The typical tendency is to
focus on the teams‚Äô capability to implement and quickly
iterate on a prototype,which is released very fast. Thus, in a
context where it is hard for even the most lightweight agile
methodologies to penetrate, research should focus on the
trade-off between development speed and accumulated
technical debt [65], which appears to be the most important
determinant for the success of an early-stage startup.

Our investigation of early-stage startups opens up several
opportunities for further research. Most importantly, the
performance drop-down caused by the necessity of return
ing the accumulated technical debt while expanding the
company‚Äôs operations and structuring mitigation strategies
needs to be addressed. This can be achieved by meeting the
following four software development objectives:

Category Coleman [34]

CAT1 Experience the lack of rigid engineering activities and documentation. Flexibility and process erosionmaintaining
simple and informalwork-Ô¨Çows.

CAT4 CTOs‚Äô and CEOs‚Äô background has a great impact on the adopted development process.Nevertheless, teammembers
remain self-organized, able to intervene in all the aspects of the development processwithout any direct supervision.

CAT5 Verbal communication and lack of heavy documentation and bureaucracy.

CAT6 Nimble and ad-hoc solutions prevent the use of heavy bureaucracy and formal communication strategies, even though
the accumulated tacit knowledge is hard tomanage and transfer to new hires.

Category Baskerville [98]

CAT1 Make heavy use of simple tools and existing components.

CAT2 Uncertain conditionsmake long-term planning not viable. Speed-up development by releasingmore often the
software and ‚Äúimplanting‚Äù customers in the development environment.

CAT3 Tailor the development process daily according to the intense demands for speed, skipping phases or tasks thatmight
impede the ability to deliver software quickly even though producing lower quality software.

CAT5 Invest time in facilitating development of scalable systems by the use of simple but stable architectural solutions.

CAT7 A desperate rush-to-market.A lack of experience developing software under the conditions this environment imposes.

Category Brooks [99]

CAT1 Themost radical possible solution for constructing software is not to construct it at all, taking advantage ofwhat
others have already implemented. It is themain strategy,which enables companies to externalize complexity to third
party solutions.

CAT2 Avoid deciding preciselywhat to build but rather iteratively extract and reÔ¨Åne the product requirements from
customers and users.

CAT3 Starting from simple solutions allows creating early prototypes and control complexity over time.

CAT4 People are the center of a software project and it is important to empower and liberate their creativemind.

 integrating scalable solutionswith fast iterations and a
minimal set of functionalities (this allows startups to
maintain effective planning and realistic expectations)

 empowering team members enabling them to oper
ate horizontally in all the activities of the develop
ment environment simultaneously

 improve desirableworkÔ¨Çow patterns through the ini
tiation of a minimal project management over time,
as a natural result of emerging activities of tracing
project progress and task assignmentmechanisms

 then, only when the chaos has been initially man
aged, planning long-term performance by adoption
of Agile and Lean development practices.

Eventually, to enable the introduction and adoption of
new development methodologies, research is needed on
new/adapted technology transfer models from academia
and industry to startups‚Äô contexts.

6 THEORY VALIDATION

In this section we discuss the validity of the GSM by means
of cross-methodological observations, as discussed in Sec
tion 3.5. As we refer to the GSM‚Äôs main categories through
out the validation, we list their name and corresponding
sectionwhere they have been introduced:

CAT1 Speed-up development (4.6).

CAT2 Evolutionary approach (4.4).

CAT3 Product quality has low priority (4.5).

CAT4 Team is catalyst of development speed (4.3).

CAT5 Accumulated technical debt (4.7).

CAT6 Initial growth hinders performance (4.8).

CAT7 Severe lack of resources (4.2).

6.1 Comparison with OtherModels

To validate the generalization of themodel,we describe con
ceptualizations derived from the GSM that are supported by
previousmodels developed by Coleman [16], [17], [34], Bas
kerville [98] and Brooks [99]. Table 2 presents an overview
of the comparison, mapping GSM categories to aspects
reported in literature.

We refer toColeman‚Äôswork since hehas conducted similar
studies in the context of startups, even thoughwith a different
focus. Coleman investigated factors in software development
that hinder initiatives of one-size-Ô¨Åts-all software process
improvement in a later stage, representing also companies in
the expansion phasewithmore than 100 employees.

Coleman aims to highlight how managers consider two
distinct kinds of processes: essentials and non-essentials. The
essential processes are the most closely linked to product
development, such as requirements gathering, design and
testing. The non-essential processes are those that might be
omitted, such as planning, estimating and stagingmeetings.
In particular, he discusses how practices are routinely
removed: ‚ÄúWith most methodologies and approaches, very
few stick to the letter of them and they are always adapted,
so we adapted ours to the way we wanted it to work for us,
for our own size and scale‚Äù [16].

Coleman‚Äôs network is characterized by the ‚Äúcost of proc
ess‚Äù (core category) and all the factors that in management
contributed to the lack of software process improvements.
The cost of process represents the lack of formal and prescrip
tivework-Ô¨Çows in development,mainly conducted by verbal
communication without heavy documentation or bureau
cracy. Coleman reports on the practitioners‚Äô perception that
documentation alone doesnot ensure a shared understanding
of project requirements. Moreover, managers perceive rigid
processes as having a negative impact on the creativity and
Ô¨Çexibility of the development team. This is in accordance
with our generated theory,which bases the reasons for adopt
ing evolutionary and low-precision engineering elements on
the Ô¨Çexibility and reactivity attributes of the development
process in startups.

As also reported in the GSM, the deÔ¨Ånition of a
‚Äúminimum process‚Äù is not a matter of poor knowledge and
training, but rather a necessity that lets the company move
faster. ‚ÄúOne-size-Ô¨Åts-all‚Äù solutions have always found difÔ¨Å
culty in penetrating small software organizations [100].
When startups begin establishing any rigid SPI process,
they experience process erosions [16], which result in work
Ô¨Çows barely satisfying organizational business needs. Soft
ware startups favor the use of agile principles in support of
creativity and Ô¨Çexibility instead of one-size-Ô¨Åts-all SPI.

Further, Coleman describes amanagement approach ori
ented towards ‚Äúembrace and empower‚Äù, consisting of trust
in the development staff to carry out tasks with less direct
supervision [16]. Nevertheless, software development man
agers and founders still have an impact on managemen
style and indirectly on the software development process.
In early-stage startups, founders are mainly software devel
opment managers as CEOs/CTOs and technical practi
tioners at the same time. As Coleman identiÔ¨Åed the
inÔ¨Çuence of the founders‚Äô and managers‚Äô background on
the software development process, the GSM similarly iden
tiÔ¨Åes that the CEOs/CTOs background shapes the high
level strategies adopted in developing the initial product.

Baskerville [98] refers to rigid SPI approaches as typi
cally effective only in large-scale, long-term development
efforts with stable and disciplined processes. Internet
speed software development (oriented towards daily
builds, aimed at developing a product with high speed)
differs from traditional software development. Baskerville
studied 10 companies using a Grounded Theory approach.
He found that the major causal factors that inÔ¨Çuence
development are a desperate rush to market, a new and
unique softwaremarket environment, and a lack of experi
ence developing software under the conditions this envi
ronment imposes. Even though with different research
focus and study context, Baskerville revealed similar
causal factors as the GSM (see Table 2). He argues that the
dawn of the Internet era has intensiÔ¨Åed software develop
ment problems by emphasizing shorter cycle times as a
strategy to efÔ¨Åciently validate a product to the target
market.

With a wider focus, Brooks [99] discusses the challenges
involved in constructing software products. Brooks divides
difÔ¨Åculties in development into essence (inherent to the
nature of the software), and accidents (difÔ¨Åculties attending
software production that are not inherent). In other words,
essence concerns the hard part of building a software
through activities such as speciÔ¨Åcation, design, testing.
Accidents refer to the labor of representing the software or
testing its representation. Brooks claims that themajor effort
applied by engineers was dedicated towards accident prob
lems, trying to exploit new strategies to enhance software
performance, reliability and simplicity of development,

such as the introduction of high-level languages for pro
gramming. Despite the great achievements in improving
development performance, the ‚Äúessence‚Äù property of the
software remained unaltered. The basic mitigation strate
gies presented by Brooks on the essence (i.e., buy versus
build; requirements reÔ¨Ånement and rapid prototyping;
incremental development; and great teams) accurately Ô¨Åt
the GSM (see Table 2), forecasting the state-of-practice in
modern startups.

6.2 Theoretical Categories and Existing Literature

In this section we extend the theory validation by mapping
the categories of the GSM to empirical studies that investi
gated startup companies. We map the studies‚Äô main contri
butions to one or more GSM categories (Table 3).We sorted
the table according to the number of GSM categories cov
ered by the studies.

Seven out of 37 studies address all GSM categories in
their discussion. All studies address at least one GSM cate
gory. The majority of the retrieved studies (29) mention
issues related to speed up development (CAT1), the core cate
gory of the GSM. Another common category, addressed by
26 studies, is the team is the catalyst of development (CAT4).
The importance of people has been widely discussed in
other software engineering studies (e.g., Cooper [109],
DeMarco [110], Coleman [111], Valtanen [112], Adolph and
Kruchten [113], and Cockburn [114]), advocating for the
need to empower people. Less than half of the studies men
tion results related to product quality has low priority (CAT3),
accumulated technical debt (CAT5), and initial grow hinders per
formance (CAT6). This indicates a potential lack of research
and suggests directions for futurework.

6.3 Confounding Factors

The purpose of this section is to identifywhich confounding
factors might threaten the validity of the GSM. While the
mapping in Section 6.2 validated the literature coverage of
GSM‚Äôs categories, here we are interested in those variables
that are not covered by the GSM and might interfere with
the theoretical model positively or negatively [75]. We
report those factors identiÔ¨Åed by the SMS, but not consid
ered by the GSM: creativity and innovation,market require
ments and application type, and developer experience,
summarized in Table 4.

Understanding the impact of a confounding factor on the
interpretation of themodel is important for further analyses
and use of the GSM.A researcher, using the GSM (Section 4)
and its implications (Section 5), has to contextualize his
analysis with the startups‚Äô basic demographic and back
ground characteristics. For example, market requirements
(see Table 4) might undermine the generalizability of the
GSM. In such a scenario, avoiding minimum expectations
of quality assurance in ‚Äúquality critical markets‚Äù, such as
security in banking services, would profoundly affect the
customers‚Äô satisfaction.

7 THREATS TO VALIDITY

In this section we discuss the validity of the overall research
methodology. We structure the discussion according to
Wohlin‚Äôs taxonomy [115].

7.1 External Validity

One threat to external validity is the selection of subjects inter
viewed for the study. This threat affects GT, a qualitative
research method using semi-structured interviews, and
centered on respondent‚Äôs opinions. Tomitigate this threatwe
selected interviewees that covered the positions of CTOs and
CEOs. Their broad perspectives on their startup organization
was the onlydata taken into consideration in the study.

TABLE 4
Confounding Factors in the GSM

Confounding factors Description

Creativity and innovation ([19]) The study reports how product-oriented development, in contrast to process imposition, pro
vides a degree of freedom to the development team that enhances the creativity of developers
and augments the innovation capability of the company in the early-stage.

Their main impact is related to the adoption of Ô¨Çexible and reactive solutions for the develop
ment process. In particular, the studies refer to the necessity of fulÔ¨Ållment of quality concerns
that goes beyond scalability andUX,when requirements are rigidly imposed or the application
domain iswell-known. In these cases providing low-quality products to Ô¨Ånal usersmight
determine the failure of a startup.

Developer experience ([3], [39]) Startups often rely at the beginning on clever, but inexperienced developers.However,
having teammemberswith deep experiencewould be a ‚Äúdouble-edged sword‚Äù. Experience
might quickly provide structure andmaturity to the development process; yet itmight cause
challenges inmanaging self-conÔ¨Ådent overachievers that almost inevitably clash. Conse
quently, teammanagementmight require control and coordination activities that hinder
Ô¨Çexibility of the development environmentwhich is essential in early-stage startups.

The majority of the studied startups are successful web
companies, introducing a potential bias in the development
of the GSM. In particular, we lack the perspective of failed
startups that potentially could have provided stronger evi
dence for the relationships in the GSM. We partially miti
gated this threat by comparing the GSM with simila
models. The comparison helped in establishing the context
towhich the study Ô¨Åndings can be generalized. In particular
the previousmodel developed by Coleman [16] has allowed
us to identify similarities and differences, enabling a
broader reasoning related to factors that hinder maturing
processes in startups. In addition, we analyzed literature
covered by the SMS on startups. However, including com
panies focusing on, e.g., embedded real time systems or
failed startupsmight have led to different results.

7.2 Internal Validity

To enhance internal validity, we created a three-dimen
sional research framework. Through a Grounded Theory
approach, supported by a systematic mapping study, inter
views and follow-up questionnaires, we searched for con
vergence among different sources of information to conÔ¨Årm
or contradict the generated theory. Our strategy included
also the collection of supporting artifacts (e.g., project plans,
meeting notes, bug repositories) to verify the statements
made by the interviews. However, none of the companies
could provide access to this information. Furthermore, the
only a subset (nine out of 13) of the interviewees returned
the questionnaire.

To validate the GSM we conducted a comparison of the
emergent theory with existing literature and previously
developedmodels.With the theory validationwe highlighted
and examined similarities, contrasts and explanations [116].
In this regard, Eisenhardt stated: ‚ÄúTying the emergent theory
to existing literature enhances the internal validity, generaliz
ability, and theoretical level of the theory building from a case
study research [. . .] because the Ô¨Åndings often rest on a very
limited number of cases.‚ÄùWe identiÔ¨Åed important confound
ing factors, related to innovation, market requirements and
developer experience (see Section 6.3). These factors are not
catered for in the GSM, even though they are regarded (by
other studies) to be relevant for the startup context.

We mitigated reporting bias bypackaging allneededmate
rial for conducting new studies, providing an interview pack
age with instructions available in the supplemental material
of this paper [72].Moreover, two researchers not involved in
the execution of the study conducted a peer-review analysis
of the theory‚Äôs constructs. To control distortion during analy
siswemade extensive use ofmemos and comparative analy
sis, through which we were able to check if data Ô¨Åt into the
emerging theory and countered subjectivity.

7.3 Construct Validity

One threat to this study is a possible inadequate description
of constructs. To diminish this risk, the entire study con
structs have been adapted to the terminology utilized by
practitioners and deÔ¨Åned at an adequate level for each theo
retical conceptualization. For instance, we deÔ¨Åned Time
shortage in terms of Investor pressure, CEO/business pressure,
Demo presentations at events and internal Ô¨Ånal deadline as used
by most of the interviewees in the study. Moreover, during
the coding of interview transcripts, we adopted explanatory
descriptive labels for theoretical categories, to capture the
underlying phenomenonwithout losing relevant details.
The second important threat is caused by the fact that inter
vieweesmight already be aware of the possible emergent the
ories analyzed by researchers. To reduce this risk,we did not
disclose any goal or emergent results to the interviewees.

7.4 Conclusion Validity

Grounded Theory has been applied by other researchers in
similar contexts to attest relationships among conceptuali
zations of an examined phenomenon (see [17], [34], [117]).
Those relationships should be veriÔ¨Åed in such a way that
emerging Ô¨Åndings remain consistent as further data is col
lected. In particular we were prepared to modify generated
categories so that the new data could be adapted into the
emerging theory according to the concepts of theoretical
sampling and saturation.
 
According to the theoretical sampling concept,we adjusted
our study design and the emergent theory until onlymarginal
results were generated. Moreover, to enhance reliability of
the outcome conceptualizations and relations, we conducted
the coding of interviews by following a systematic process.

An important issue is related to the fact that the limited
number of interviews might not represent the complete sce
narios in our study context. This issue is partially mitigated
as result of the theoretical saturation concept. Ramer [118],
comparing quantitative to qualitative studies, states that:
‚Äúreaching data saturation, which involves obtaining data
until no new information emerges, is critical for obtaining
applicability in qualitative research‚Äù. After attesting that no
more relevant information could be gathered from execut
ing additional interviews, we iterated the Grounded Theory
cycle one more time, verifying that the explanatory power
of the core categorywas fulÔ¨Ålled.

8 CONCLUSION

Startups are able to produce cutting-edge software products
with awide impact on themarket, signiÔ¨Åcantly contributing
to the global economy. Software development, especially in
the early-stages, is at the core of the companies‚Äô daily activi
ties. Despite their high failure rate, an earlier systematic
mapping study [2] found that the proliferation of startups is
not matched by a scientiÔ¨Åc body of knowledge. To be able
to intervene on software development strategies of startups
with scientiÔ¨Åc and engineering approaches, the Ô¨Årst step is
to understand startups‚Äô behavior. Hence, in this paper, we
provide an initial explanation of the underlying phenome
non by means of a Grounded Theory study based on 13
cases.We focused on early engineering activities, from idea
conception to the Ô¨Årst open beta release of the product.

We grounded the GreenÔ¨Åeld Startup Model on the hind
sight knowledge collected from practitioners with the aim
of explaining how development strategies are engineered
and practices are utilized in startups. The explanatory capa
bility and correctness of the model has been validated
through systematic comparisons with the state-of-the-art.
The SMS revealed a multi-faceted state-of-the-art, lacking
support for software development activities in startup com
panies. On the other hand, the study presented in this
paper, provides a broad set of empirical evidence obtained
by a Grounded Theory approach.

The overall results of this study found that the driving
characteristics of startups were uncertainty, lack of resour
ces, and time-pressure. These factors inÔ¨Çuence the software
development to an extent that transforms every decision
related to the development strategies into a difÔ¨Åcult trade
off for the company. Moreover, although startups share
characteristics with similar SE contexts (e.g., market-driven
development, small companies and web engineering), a
unique combination of factors poses a whole new set of
challenges that need to be addressed by further research.
When bringing the Ô¨Årst product to market, startups‚Äô most
urgent priority is releasing the product as quickly as possi
ble to verify the product/market Ô¨Åt, and to adjust the busi
ness and product trajectory according to early feedback and
collected metrics. At this stage, startups often discard for
mal project management, documentation, analysis, plan
ning, testing and other traditional process activities.
Practitioners take advantage of an evolutionary prototyping
approach, using well-integrated tools and externalizing
complexity to third party solutions.

However, the need to restructure the product and control
the engineering activitieswhen the company grows counter
balances the initial gain of Ô¨Çexibility and speed. If successful,
the startup will face growth of customers, employees and
product functionalities that leads to the necessity of control
ling the initial chaotic software development environment.
The most signiÔ¨Åcant challenge for early-stage startups is
Ô¨Ånding the sweet spot between being fast enough to enter
themarket early and controlling the amount of accumulated
technical debt.

What follows from the GSM are four software develop
ment objectives that need to be considered by early-stage
startups and researchers seeking to improve state-of-the-art:

 Integration of scalable solutions with fast iterations
andminimal set of functionalities.

 Empowerment of the team-members granting them
the responsibility and autonomy to be involved in all
activities of the development phase.

 Improvement ofworkÔ¨Çow patterns through the initi
ation of aminimal projectmanagement.

 Adaptation of Lean and Agile development practices
after the initial chaotic startup phase.

In this paper we discussed a number of novel challenges
for both practitioners and researchers, while presenting a
Ô¨Årst set of concepts, terms and activities for the rapidly
increasing startup phenomenon. By making a comparison
with Berry‚Äôs deÔ¨Ånition of SE [119], we would like to see the
rise of a new discipline‚Äîstartup engineering‚Äîwhich can be
deÔ¨Åned as the use of scientiÔ¨Åc, engineering, managerial and sys
tematic approaches with the aim of successfully developing soft
ware systems in startup companies.

ACKNOWLEDGMENTS

The authors would like to thank the Blekinge Institute of
Technology, Sweden, and the Free University of Bolzano,
Italy, all the participants for their support of this research,
and Philip Stastny for proofreading themanuscript.

REFERENCES

[1] D. Smagalla, ‚ÄúThe truth about software startups,‚Äù MIT Sloan
Manage. Rev. (USA), vol. 45, no. 2, p. 7, 2004.

[2] N. Paternoster, C. Giardino, M. Unterkalmsteiner, T. Gorschek,
and P. Abrahamsson, ‚ÄúSoftware development in startup compa-
nies: A systematic mapping study,‚Äù Inf. Softw. Technol., vol. 56,
no. 10, pp. 1200‚Äì1218,Oct. 2014.

[3] M. Crowne, ‚ÄúWhy software product startups fail and what to
do about it,‚Äù in Proc. Int. Eng. Manage. Conf., 2002, pp. 338‚Äì
343.

[4] A.Maccormack, ‚ÄúHow Internet companies build software,‚ÄùMIT
SloanManage. Rev., vol. 42, no. 2, pp. 75‚Äì84, 2001.

[5] K. M. Eisenhardt and S. L. Brown, ‚ÄúTime pacing: Competing in
markets that won‚Äôt stand still,‚Äù Harvard Bus. Rev., vol. 76, no. 2,
pp. 59‚Äì69, 1998.

[6] S. M. Sutton, ‚Äú The role of process in software startup,‚Äù IEEE
Softw., vol. 17, no. 4, pp. 33‚Äì39, Aug. 2000.

[7] G. Coleman, ‚ÄúAn empirical study of software process in
practice,‚Äù in Proc. Hawaii Int. Conf. Syst. Sci., 2005, p. 315c.

[8] S. Blank, The Four Steps to the Epiphany. 1st ed. Louisville, KY,
USA: CafePress, Feb. 2005.

[9] M. KajkoMattsson and N. Nikitina, ‚ÄúFrom knowing nothing to
knowing a little: Experiences gained from process improvement
in a startup company,‚Äù in Proc. Int. Conf. Comput. Sci. Softw.
Eng., 2008, pp. 617‚Äì621.

[10] T.W. Archibald, L. C. Thomas, and E. Possani, ‚ÄúKeep or return?
Managing ordering and return policies in startup companies,‚Äù
Eur. J. Oper. Res., vol. 179, no. 1, pp. 97‚Äì113,May 2007.

[11] R. Frigg and S. Hartmann, ‚ÄúModels in science,‚Äù in The Stanford
Encyclopedia of Philosophy, fall 2012 ed., E. N. Zalta, Ed. Stanford,
CA,USA: StanfordUniv, 2012.

[12] A. Nugroho, J. Visser, and T. Kuipers, ‚ÄúAn empirical model of
technical debt and interest,‚Äù in Proc. 2ndWorkshopManag. Techn.
Debt, 2011, pp. 1‚Äì8.

[13] C. Izurieta, A. Vetro, and N. Zazworka, ‚ÄúOrganizing the techni
cal debt landscape,‚Äù in Proc. 3rd Workshop Manag. Techn. Debt,
2012, pp. 23‚Äì26.

[14] R. Grimaldi and A. Grandi, ‚ÄúBusiness incubators and new ven
ture creation: An assessment of incubating models,‚Äù Technova
tion, vol. 25, no. 2, pp. 111‚Äì121, Feb. 2005.

[15] C. M. Christensen, The Innovator‚Äôs Dilemma. Boston, MA, USA:
Harvard Bus. School Press, 1997.

[16] G. Coleman and R. O‚ÄôConnor, ‚ÄúAn investigation into software
development process formation in software startups,‚Äù J. Enter
prise Inf.Manage., vol. 21, no. 6, pp. 633‚Äì648, 2008.

[17] G. Coleman and R. O‚ÄôConnor, ‚ÄúInvestigating software process in
practice: A grounded theory perspective,‚Äù J. Syst. Softw., vol. 81,
no. 5, pp. 772‚Äì784,May 2008.

[18] J. Bach, ‚ÄúMicrodynamics of process evolution,‚Äù IEEE Comput.,
vol. 31, no. 2, pp. 111‚Äì113, Feb. 1998.

[19] I. Heitlager, R. Helms, and S. Brinkkemper, ‚ÄúA tentative tech
nique for the study and planning of coevolution in product,‚Äù in
Proc. 3rd Int.Workshop Softw. Evolvability, 2007, pp. 42‚Äì47.

[20] K. Martin and B. Hoffman, ‚ÄúAn open source approach to devel
oping software in a small organization,‚Äù IEEE Softw., vol. 24,
no. 1, pp. 46‚Äì53, Jan./Feb. 2007.

[21] A. Cockburn, Surviving ObjectOriented Projects. Reading, MA,
USA:AddisonWesley, 1998.

[22] M. Tanabian, ‚ÄúBuilding highperformance team through effec
tive job design for an early stage software startup,‚Äù in Proc. Int.
Eng.Manage. Conf., 2005, pp. 789‚Äì792.

[23] S. Chorev and A. R. Anderson, ‚ÄúSuccess in Israeli hightech start
ups; critical factors and process,‚Äù Technovation, vol. 26, no. 2,
pp. 162‚Äì174, Feb. 2006.

[24] M. Kakati, ‚ÄúSuccess criteria in hightech new ventures,‚Äù Techno
vation, vol. 23, no. 5, pp. 447‚Äì457,May 2003.

[25] M.Marmer, B. L. Herrmann, E. Dogrultan, R. Berman, C. Eesley,
and S. Blank, ‚ÄúThe startup ecosystem report 2012,‚Äù Startup
Genome, 2012.

[26] B. Regnell, M. H‚Ç¨ost, J. N. och Dag, P. Beremark, and T. Hjelm, ‚Äú
An industrial case study on distributed prioritisation in market
driven requirements engineering for packaged software,‚Äù
Requirements Eng., vol. 6, no. 1, pp. 51‚Äì62, 2001.

[27] J. Natt Och Dag, ‚ÄúElicitation and management of user require
ments in marketdriven software development,‚Äù Ph.D. disserta
tion, Dept. Commun. Syst, Lund Inst. Technol., Lund, Sweden,
2002.

[28] P. Sawyer, I. Sommerville, and G. Kotonya, ‚ÄúImproving market
driven RE processes,‚Äù in Proc. Int. Conf. ProductFocused Softw.
Process Improvement, 1999, pp. 222‚Äì236.

[29] C. Potts, ‚ÄúInvented requirements and imagined customers:
Requirements engineering for offtheshelf software,‚Äù in Proc.
2nd Int. Symp. Requirements Eng.,Mar. 1995, pp. 128‚Äì130.

[30] L. Karlsson, A
. G. Dahlstedt, J. Natt Och Dag, B. Regnell, and A.
Persson, ‚ÄúChallenges inmarketdriven requirements engineering
 an industrial interview study,‚Äù in Proc. 8th Int. Workshop
Requirements Eng.: Found. Softw. Quality, 2002, pp. 37‚Äì49.

[31] A. Dahlstedt, ‚ÄúStudy of current practices in marketdriven
requirements engineering,‚Äù in Proc. 3rd Conf. Promotion Res. IT,
2003.

[32] M. Keil and E. Carmel, ‚ÄúCustomerdeveloper links in software
development,‚Äù Commun. ACM, vol. 38, no. 5, pp. 33‚Äì44, May
1995.

[33] C. F. Alves, S. Pereira, and J. B. de Castro, ‚ÄúA study in market
driven requirements engineering,‚Äù in Proc.Workshop em Engenha
ria de Requisitos, Rio de Janeiro, Brazil, 2006, pp. 61‚Äì66.

[34] G. Coleman and R. O‚ÄôConnor, ‚ÄúUsing grounded theory to under
stand software process improvement: A study of Irish software
product companies,‚Äù Inf. Softw. Technol., vol. 49, no. 6, pp. 654‚Äì
667, 2007.

[35] E. Carmel, ‚ÄúTimetocompletion in software package startups,‚Äù
in Proc. 27th Hawaii Int. Conf. Syst. Sci., 1994, pp. 498‚Äì507.

[36] M. Lehman, ‚ÄúPrograms, life cycles, and laws of software
evolution,‚Äù Proc. IEEE, vol. 68, no. 9, pp. 1060‚Äì1076, Sep. 1980.

[37] R. Banker and G. Davis, ‚ÄúSoftware development practices, soft
ware complexity, and software maintenance performance: A
Ô¨Åeld study,‚ÄùManage. Sci., vol. 44, no. 4, pp. 433‚Äì450, 1998.

[38] S. Ambler, ‚ÄúLessons in agility from Internetbased devel
opment,‚Äù IEEE Softw., vol. 19, no. 2, pp. 66‚Äì73,Mar./Apr. 2002.

[39] D. YofÔ¨Åe, ‚ÄúBuilding a company on Internet time: Lessons from
netscape,‚Äù CaliforniaManage. Rev., vol. 4, no. 3, 1999.

[40] P. Tingling, ‚ÄúExtreme programming in action: A longitudinal
case study,‚Äù in Proc. 12th Int. Conf. HumanComput. Interaction:
InteractionDes.Usability, 2007, pp. 242‚Äì251.

[41] K. Beck and C. Andres, Extreme Programming Explained: Embrace
Change (2nd Edition). Reading,MA,USA: AddisonWesley, 2004.

[42] A. da Silva and F. Kon, ‚ÄúXP south of the equator: An experience
implementing XP in Brazil,‚Äù in Proc. 6th Int. Conf. Extreme Pro
gram. Agile Processes Softw. Eng., 2005, pp. 10‚Äì18.

[43] R. Deias and G.Mugheddu, ‚ÄúIntroducing XP in a startup,‚Äù Euro
pean Internet Services Company, 2002.

[44] N. Gautam andN. Singh, ‚ÄúLean product development:Maximiz
ing the customer perceived value through design change
(redesign),‚Äù Int. J. Prod. Econ., vol. 114, no. 1, pp. 313‚Äì332, Jul.
2008.

[45] P. Abrahamsson, O. Salo, J. Ronkainen, and J. Warsta, ‚ÄúAgile
software development methods,‚Äù Relatorio Tecnico, Finl^andia,
2002.

[46] M. Taipale, ‚ÄúHuitale  A story of a Finnish lean startup,‚Äù in Proc.
1st Int. Conf. Lean Enterprise Softw. Syst., 2010, vol. 65, pp. 111‚Äì
114.

[47] K. Kuvinka, ‚ÄúScrum and the single writer,‚Äù in Proc. Techn. Com
mun. Summit, 2011, pp. 18‚Äì19.

[48] C. Midler and P. Silberzahn, ‚ÄúManaging robust development
process for hightech startups through multiproject learning:
The case of two European startups,‚Äù Int. J. Project Manage.,
vol. 26, no. 5, pp. 479‚Äì486, Jul. 2008.

[49] O.P. Hilmola, P. Helo, and L. Ojala, ‚ÄúThe value of product
development lead time in software startup,‚Äù Syst. Dyn. Rev.,
vol. 19, no. 1, pp. 75‚Äì82, 2003.

[50] S. Yogendra, ‚ÄúAligning business and technology strategies: A
comparison of established and startup business contexts,‚Äù in
Proc. Internal Eng.Manage. Conf., 2002, pp. 2‚Äì7.

[51] C.McPhee and A. Eberlein, ‚ÄúRequirements engineering for time
tomarket projects,‚Äù in Proc. 9th Int. Conf. Eng. Comput.Based
Syst., 2002, pp. 17‚Äì24.

[52] M. A. Cohen, J. Eliasberg, and T.H.Ho, ‚ÄúNew product develop
ment: The performance and timetomarket tradeoff,‚Äù Manage.
Sci., vol. 42, no. 2, pp. 173‚Äì186, Feb. 1996.

[53] E. Ries, The Lean Startup: How Today‚Äôs Entrepreneurs Use Continu
ous Innovation to Create Radically Successful Businesses. Crown
Business, 2011.

[54] M. Fayad, ‚ÄúProcess assessment considered wasteful,‚Äù Commun.
ACM, vol. 40, no. 11, pp. 125‚Äì128, 1997.

[55] J.Mater and B. Subramanian, ‚ÄúSolving the software qualityman
agement problem in Internet startups,‚Äù in Proc. 18th Annu. PaciÔ¨Åc
Northwest Softw. Quality Conf., 2000, pp. 297‚Äì306.

[56] B.Mirel, ‚ÄúProduct, process, and proÔ¨Åt: The politics of usability in
a software venture,‚Äù ACM J. Comput. Documentation, vol. 24,
no. 4, pp. 185‚Äì203, 2000.

[57] E. Kim and S. Tadisina, ‚ÄúFactors impacting customers‚Äô initial
trust in ebusinesses: An empirical study,‚Äù in Proc. 38th Hawaii
Int. Conf. Syst. Sci., 2005, vol. 07, pp. 1‚Äì10.

[58] R.Hanna and T.U.Daim, ‚ÄúInformation technology acquisition in
the service sector,‚Äù Int. J. Services Sci., vol. 3, no. 1, p. 21, 2010.

[59] S. Jansen, S. Brinkkemper, and I.Hunink, ‚ÄúPragmatic and oppor
tunistic reuse in innovative startup companies,‚Äù IEEE Softw.,
vol. 25, no. 6, pp. 42‚Äì49,Nov./Dec. 2008.

[60] D.Wall, ‚ÄúUsing open source for a proÔ¨Åtable startup,‚Äù IEEE Com
put., vol. 34, no. 12, pp. 158‚Äì160, Dec. 2001.

[61] L. Bean and D. D. Hott, ‚ÄúWiki: A speedy new tool to manage
projects,‚Äù J. Corporate Accounting Finance, vol. 16, no. 5, pp. 3‚Äì8,
Jul. 2005.

[62] E. Tom, A. Aurum, and R. Vidgen, ‚ÄúAn exploration of technical
debt,‚Äù J. Syst. Softw., vol. 86, no. 6, pp. 1498‚Äì1516, 2013.

[63] W. Cunningham. (1992). The WyCash Portfolio Management
System [Online].Available: http://c2.com/doc/oopsla92.html

[64] (2013). Fourth International Workshop on Managing Technical
Debt [Online]. Available: http://www.sei.cmu.edu/community/
td2013/

[65] N. Brown, Y. Cai, Y. Guo, R. Kazman, M. Kim, P. Kruchten, E.
Lim, A. MacCormack, R. Nord, I. Ozkaya, R. Sangwan, C. Sea
man, K. Sullivan, andN. Zazworka, ‚ÄúManaging technical debt in
softwarereliant systems,‚Äù in Proc. FSE/SDP Workshop Future
Softw. Eng. Res., 2010, pp. 47‚Äì52.

[66] Microsoft, Microsoft Application Architecture Guide. Microsoft
Press, Redmond,USA, 2009.

[67] M. Unterkalmsteiner, T. Gorschek, A. Islam, C. K. Cheng, R. Per
madi, and R. Feldt, ‚ÄúEvaluation and measurement of software
process improvement: A systematic literature review,‚Äù IEEE
Trans. Softw. Eng., vol. 38, no. 2, pp. 398‚Äì424,Mar./Apr. 2012.

[68] B. G. Glaser, Theoretical Sensitivity: Advances in the Methodol
ogy of Grounded Theory. Mill Valley, CA, USA: Sociology
Press, 1978.

[69] H. M. Edwards, S. McDonald, and S. Michelle Young, ‚ÄúThe rep
ertory grid technique: Its place in empirical software engineering
research,‚Äù Inf. Softw. Technol., vol. 51, no. 4, pp. 785‚Äì798, Apr.
2009.

[70] A. L. Strauss and J.M. Corbin, Basics of Qualitative Research: Tech
niques and Procedures for Developing Grounded Theory, P. Labella,
Ed.Newbury Park, CA,USA: Sage, 1998.

[71] J. Corbin and A. Strauss, ‚ÄúGrounded theory research: Proce
dures, canons, and evaluative criteria,‚Äù Qualitative Sociol., vol. 13,
no. 1, pp. 3‚Äì21, 1990.

[72] C. Giardino, N. Paternoster, M. Unterkalmsteiner, T. Gorschek,
and P. Abrahamsson. (2015). Supplemental material to ‚ÄòSoftware
development in startup companies: The greenÔ¨Åeld startup mod
el‚Äô [Online]. Available: http://www.bth.se/com/mun.nsf/
pages/greenÔ¨Åeld

[73] C. W. Dawson, Projects in Computing and Information Systems A
Student‚Äôs Guide. Englewood Cliffs,NJ,USA: PrenticeHall, 2009.

[74] R. K. Yin, Case Study Research: Design and Methods. Newbury
Park, CA, USA: Sage, 1994.

[75] C. Robson, RealWorld Research: A Resource for Social Scientists and
PractitionerResearchers.New York,NY, USA:Wiley, 2009.

[76] W. J. Orlikowski, ‚ÄúCASE tools as organizational change:
Investigating incremental and radical changes in systems
development,‚Äù MIS Quart., vol. 17, no. 3, pp. 309‚Äì340, Sep.
1993.

[77] G. Coleman and R. O‚ÄôConnor, ‚ÄúSoftware process in practice: A
grounded theory of the Irish software industry,‚Äù in Proc. 13th
Eur. Conf. Softw. Process Improvement, 2006, pp. 28‚Äì39.

[78] A. Davis, ‚ÄúOperational prototyping: A new development
approach,‚Äù IEEE Softw., vol. 9, no. 5, pp. 70‚Äì78, Sep. 1992.

[79] S. Borodovsky and S. Rosset, ‚ÄúA/b testing at SweetIM: The
importance of proper statistical analysis,‚Äù in Proc. 11th Int. Conf.
DataMiningWorkshops, 2011, pp. 733‚Äì740.

[80] S. Zhong, C. Liping, and C. Tianen, ‚ÄúAgile planning and devel
opment methods,‚Äù in Proc. 3rd Int. Conf. Comput. Res. Develop.,
2011, pp. 488‚Äì491.

[81] R. Pooley and P. King, ‚ÄúThe uniÔ¨Åedmodelling language and per
formance engineering,‚Äù IEE Proc. Softw., vol. 146, no. 1, pp. 2‚Äì10,
1999.

[82] M. Poppendieck and T. Poppendieck, Implementing Lean Software
Development: From Concept to Cash. Reading,MA, USA: Addison
Wesley, 2006.

[83] F. Maurer and S. Martel, ‚ÄúExtreme programming. Rapid devel
opment for webbased applications,‚Äù IEEE Internet Comput.,
vol. 6, no. 1, pp. 86‚Äì90, Jan./Feb. 2002.

[84] C. F. Kurtz and D. J. Snowden, ‚ÄúThe new dynamics of strategy:
Sensemaking in a complex and complicated world,‚Äù IBM Syst.
J., vol. 42, no. 3, pp. 462‚Äì483, 2003.

[85] T. Gorschek, C. Wohlin, P. Carre, and S. Larsson, ‚ÄúA model for
technology transfer in practice,‚Äù IEEE Softw., vol. 23, no. 6,
pp. 88‚Äì95,Nov./Dec. 2006.

[86] W. Randolph, ‚ÄúNavigating the journey to empowerment,‚Äù Orga
nizational Dyn., vol. 23, no. 4, pp. 19‚Äì32, 1995.

[87] Y. SeungBum and C. Sang Ok, ‚ÄúEmployee empowerment
and team performance: Autonomy, responsibility, information,
and creativity,‚Äù Team Performance Manage., vol. 15, no. 5/6,
pp. 289‚Äì301, 2009.

[88] S. Fricker, T. Gorschek, C. Byman, and A. Schmidle,
‚ÄúHandshaking with implementation proposals: Negotiating
requirements understanding,‚Äù IEEE Softw., vol. 27, no. 2, pp. 72‚Äì
80,Mar./Apr. 2010.

[89] S. Fricker, T. Gorschek, and M. Glinz, ‚ÄúGoaloriented require
ments communication in new product development,‚Äù in Proc.
2nd Int.Workshop Softw. ProductManage., 2008, pp. 27‚Äì34.

[90] M. Aoyama, ‚ÄúPersonaandscenario based requirements engi
neering for software embedded in digital consumer products,‚Äù
in Proc. 13th Int. Conf. Requirements Eng., 2005, pp. 85‚Äì94.

[91] J. Rasmusson, ‚ÄúAgile project initiation techniques  the inception
deck and boot camp,‚Äù in Proc. Conf. AGILE, 2006, pp. 337‚Äì341.

[92] M. Svahnberg, T. Gorschek, T. Nguyen, and M. Nguyen, ‚Äú Uni
repm: validated and improved,‚Äù Requirements Eng., vol. 18,
no. 1, pp. 85‚Äì103, 2013.

[93] P. Kruchten, R. Nord, and I. Ozkaya, ‚ÄúTechnical debt: Frommet
aphor to theory and practice,‚Äù IEEE Softw., vol. 29, no. 6, pp. 18‚Äì
21,Nov./Dec. 2012.

[94] R. Rohrbeck, J. Heuer, and H. Arnold, ‚ÄúThe technology radar
 an instrument of technology intelligence and innovation
strategy,‚Äù in Proc. Int. Conf. Manage. Innovation Technol., 2006,
pp. 978‚Äì983.

[95] N. Shehabuddeen, D. Probert, and R. Phaal, ‚ÄúFrom theory to
practice: Challenges in operationalising a technology selection
framework,‚Äù Technovation, vol. 26, no. 3, pp. 324‚Äì335, 2006.

[96] G. Azzone and R. Manzini, ‚ÄúQuick and dirty technology assess
ment: The case of an Italian research centre,‚Äù Technological Fore
casting Social Change, vol. 75, no. 8, pp. 1324‚Äì1338, 2008.

[97] G.Aranda,A. Vizcaino,A. Cechich, andM. Piattini, ‚ÄúTechnology
selection to improve global collaboration,‚Äù in Proc. Int. Conf.
Global Softw. Eng., 2006, pp. 223‚Äì232.

[98] R. Baskerville, B. Ramesh, L. Levine, J. PriesHeje, and S. Slaugh
ter, ‚ÄúIs ‚ÄòInternetspeed‚Äô software development different?‚Äù IEEE
Softw., vol. 20, no. 6, pp. 70‚Äì77,Nov./Dec. 2003.

[99] F. Brooks Jr., ‚ÄúNo silver bullet essence and accidents of software
engineering,‚Äù IEEE Comput., vol. C20, no. 4, pp. 10‚Äì19, Apr.
1987.

[100] M. Staples, M. Niazi, R. Jeffery, A. Abrahams, P. Byatt, and
R. Murphy, ‚ÄúAn exploratory study of why organizations do
not adopt CMMI,‚Äù J. Syst. Softw., vol. 80, no. 6, pp. 883‚Äì895,
Jun. 2007.

[101] J. Zettel, F.Maurer, J.M‚Ç¨unch, and L.Wong, ‚ÄúLIPE:A lightweight
process for ebusiness startup companies based on extreme pro
gramming,‚Äù in Proc. 3rd Int. Conf. Product Focused Softw. Process
Improvement, 2001, pp. 255‚Äì270.

[102] D. Wood, ‚ÄúOpen source software strategies for venturefunded
startups,‚Äù MIND Laboratory, Univ. Maryland, College Park,
MD, USA, Tech. Rep. TRMS1287, 2005.

[103] R. StanÔ¨Åll and T. Astleford, ‚ÄúImproving entrepreneurship team
performance throughmarket feasibility analysis, early identiÔ¨Åca
tion of technical requirements, and intellectual property
support,‚Äù in Proc. Amer. Soc. Eng. Educ. Annu. Conf., 2007.

[104] E. Deakins and S. Dillon, ‚ÄúA helicalmodel formanaging innova
tive product and service initiatives in volatile commercial envi
ronments,‚Äù Int. J. Project Manage., vol. 23, no. 1, pp. 65‚Äì74, Jan.
2005.

[105] S.C. Li, ‚ÄúThe role of value proposition and value coproduction
in new Internet startups: How new venture ebusinesses achieve
competitive advantage,‚Äù in Proc. Portland Int. CenterManage. Eng.
Technol., 2007, pp. 1126‚Äì1132.

[106] H.J. Steenhuis and E. de Bruijn, ‚ÄúInnovation and technology
based economic development: Are there shortcuts?‚Äù in Proc. 4th
Int. Conf.Manage. Innovation Technol., 2008, pp. 837‚Äì841.

[107] S.l. Lai, ‚ÄúChinese entrepreneurship in the Internet age: Lessons
from Alibaba.com,‚Äù World Acad. Sci., Eng. Technol., vol. 72,
pp. 405‚Äì411, 2010.

[108] M. H‚Ç¨asel, N. Breugst, and T. Kollmann, ‚ÄúIT competence in Inter
net founder teams an analysis of preferences and product
innovativity,‚Äù Bus. Inf. Syst. Eng., vol. 52, no. 4, pp. 210‚Äì217, 2010.

[109] R. Cooper, ‚ÄúAn investigation into the new product process:
Steps, deÔ¨Åciencies, and impact,‚Äù J. Product Innovation Manage.,
vol. 3, no. 2, pp. 71‚Äì85, 1986.

[110] T. DeMarco, Peopleware: Productive Projects and Teams. 2nd ed.
DorsetHouse,New York, USA, 1999.

[111] G. Coleman, ‚ÄúeXtreme Programming (XP) as a ‚ÄòMinimum‚Äô soft
ware process: A grounded theory,‚Äù in Proc. 28th Annu. Int. Com
put. Softw. Appl. Conf., 2004, pp. 4‚Äì5.

[112] A. Valtanen, ‚ÄúBig improvements with small changes: Improving
the processes of a small software company,‚Äù in Proc. 9th Int.
Conf. ProductFocused Softw. Process Improvement, 2008, pp. 258‚Äì
272.

[113] S. Adolph and P. Kruchten, ‚ÄúReconciling perspectives:How peo
ple manage the process of software development,‚Äù in Proc. Agile
Conf., 2011, pp. 48‚Äì56.

[114] A. Cockburn, ‚ÄúCharacterizing people as nonlinear, Ô¨Årstorder
components in software development,‚Äù in Proc. 4th Int. Multi
Conf. Syst., Cybern. Informat., 1999.

[115] C. Wohlin, P. Runeson, M. H‚Ç¨ost, M. C. Ohlsson, B. Regnell, and
A. Wesslen, Experimentation in Software Engineering: An Introduc
tion.Norwell,MA, USA: Kluwer, 2000.

[116] K. M. Eisenhardt and K. M. Eisenhardt, ‚ÄúBuilding theories from
case study research,‚Äù Acad. Manage. Rev., vol. 14, no. 4, pp. 532‚Äì
550, 2007.

[117] S. Basri and R. O‚ÄôConnor, ‚ÄúTowards an understanding of
software development process knowledge in very small
companies,‚Äù in Proc. Int. Conf. Informat. Eng. In. Sci., 2011,
vol. 253, pp. 62‚Äì71.

[118] L. Ramer, ‚ÄúQuantitative versus qualitative research?‚Äù J. Obstetric,
Gynecologic, NeonatalNursing, vol. 18, no. 1, pp. 7‚Äì8, 1989.
[119] D. Berry, ‚ÄúAcademic legitimacy of the software engineering
discipline,‚Äù Softw. Eng. Inst., Tech. Rep. CMU/SEI92TR34,
Nov. 1992.

Carmine Giardino received the BSc degree in
computer science from the University of Salerno
in 2010, and the MSc degree in software engi
neering from the Free University of Bolzano/
Bozen and Blekinge Institute of Technology in
2013. He is currently working toward the PhD
degree at the Free University of Bolzano/Bozen.
His research interests include software startups
and information services with focus on trading
securities.

Nicolo Paternoster received the BSc degree in
appliedmathematics from the University of Roma
 Tor Vergata in 2009 and the MSc degree in soft
ware engineering from the Free University of Bol
zano/Bozen and Blekinge Institute of Technology
in 2013. He is a freelance software engineer and
a consultant mainly for early stage startups. His
research interest includes software startups and
blockchain technology. For more information or
contact: http://adva.io.

Michael Unterkalmsteiner received the BSc
degree in applied computer science from Free Uni
versity ofBozenBolzano in 2007, and theMSc and
PhD degrees in software engineering from Ble
kinge Institute of Technology (BTH) in 2009 and
2015, respectively. He is a postdoctoral researcher
at BTH. His research interests include software
repositorymining, softwaremeasurement and test
ing, process improvement, and requirements engi
neering. He is a member of the IEEE. For more
information or contact:www.lmsteiner.com.

Tony Gorschek is a professor of software engi
neering at Blekinge Institute of Technology (BTH).
He has over 10 years industrial experience as a
CTO, senior executive consultant and engineer,
but also as a chief architect and productmanager.
In addition, he has built up Ô¨Åve startups in Ô¨Åelds
ranging from logistics to internet based services.
Currently, he manages his own consultancy com
pany, works as a CTO, and serves on several
boards in companies developing cutting edge
technology and products. His research interests
include requirements engineering, technology and productmanagement,
process assessment and improvement, quality assurance, and practical
innovation.He is amember of the IEEE.

Pekka Abrahamsson received the PhD degree
in software engineering from the University of
Oulu, Finland, in 2002. He is a full professor of
software engineering at the Department of Com
puter and Information Science, Norwegian Uni
versity of Science and Technology, NTNU,
Trondheim, Norway. Prior to his current appoint
ment, he has served as a professor at the Free
University of Bozen Bolzano, University of Hel
sinki and VTT Technical Research Centre of Fin
land. His research interests are in the empirical
software engineering, software startups and innovation. He received the
Nokia Foundation Award in 2007 for his merits in agile software develop
ment research and his European research project on Agile methods in
embedded systems received ITEA Achievement Silver award in 2007.
He heads today the global Software Startup Research Network. He is a
member of the IEEE and ACM.
